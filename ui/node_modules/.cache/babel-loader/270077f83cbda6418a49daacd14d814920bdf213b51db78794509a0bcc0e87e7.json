{"ast":null,"code":"import{useRef,useState}from'react';// material-ui\nimport{IconButton}from'@mui/material';import{IconEdit}from'@tabler/icons';// project import\nimport{AsyncDropdown}from'ui-component/dropdown/AsyncDropdown';import AddEditCredentialDialog from'views/credentials/AddEditCredentialDialog';import CredentialListDialog from'views/credentials/CredentialListDialog';// API\nimport credentialsApi from'api/credentials';// ===========================|| CredentialInputHandler ||=========================== //\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const CredentialInputHandler=_ref=>{var _data$credential;let{inputParam,data,onSelect,disabled=false}=_ref;const ref=useRef(null);const[credentialId,setCredentialId]=useState((_data$credential=data===null||data===void 0?void 0:data.credential)!==null&&_data$credential!==void 0?_data$credential:'');const[showCredentialListDialog,setShowCredentialListDialog]=useState(false);const[credentialListDialogProps,setCredentialListDialogProps]=useState({});const[showSpecificCredentialDialog,setShowSpecificCredentialDialog]=useState(false);const[specificCredentialDialogProps,setSpecificCredentialDialogProps]=useState({});const[reloadTimestamp,setReloadTimestamp]=useState(Date.now().toString());const editCredential=credentialId=>{const dialogProp={type:'EDIT',cancelButtonName:'Cancel',confirmButtonName:'Save',credentialId};setSpecificCredentialDialogProps(dialogProp);setShowSpecificCredentialDialog(true);};const addAsyncOption=async()=>{try{let names='';if(inputParam.credentialNames.length>1){names=inputParam.credentialNames.join('&');}else{names=inputParam.credentialNames[0];}const componentCredentialsResp=await credentialsApi.getSpecificComponentCredential(names);if(componentCredentialsResp.data){if(Array.isArray(componentCredentialsResp.data)){const dialogProp={title:'Add New Credential',componentsCredentials:componentCredentialsResp.data};setCredentialListDialogProps(dialogProp);setShowCredentialListDialog(true);}else{const dialogProp={type:'ADD',cancelButtonName:'Cancel',confirmButtonName:'Add',credentialComponent:componentCredentialsResp.data};setSpecificCredentialDialogProps(dialogProp);setShowSpecificCredentialDialog(true);}}}catch(error){console.error(error);}};const onConfirmAsyncOption=function(){let selectedCredentialId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';setCredentialId(selectedCredentialId);setReloadTimestamp(Date.now().toString());setSpecificCredentialDialogProps({});setShowSpecificCredentialDialog(false);onSelect(selectedCredentialId);};const onCredentialSelected=credentialComponent=>{setShowCredentialListDialog(false);const dialogProp={type:'ADD',cancelButtonName:'Cancel',confirmButtonName:'Add',credentialComponent};setSpecificCredentialDialogProps(dialogProp);setShowSpecificCredentialDialog(true);};return/*#__PURE__*/_jsxs(\"div\",{ref:ref,children:[inputParam&&/*#__PURE__*/_jsx(_Fragment,{children:inputParam.type==='credential'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{style:{marginTop:10}}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row'},children:[/*#__PURE__*/_jsx(AsyncDropdown,{disabled:disabled,name:inputParam.name,nodeData:data,value:credentialId!==null&&credentialId!==void 0?credentialId:'choose an option',isCreateNewOption:true,credentialNames:inputParam.credentialNames,onSelect:newValue=>{setCredentialId(newValue);onSelect(newValue);},onCreateNew:()=>addAsyncOption(inputParam.name)}),credentialId&&/*#__PURE__*/_jsx(IconButton,{title:\"Edit\",color:\"primary\",size:\"small\",onClick:()=>editCredential(credentialId),children:/*#__PURE__*/_jsx(IconEdit,{})})]},reloadTimestamp)]})}),showSpecificCredentialDialog&&/*#__PURE__*/_jsx(AddEditCredentialDialog,{show:showSpecificCredentialDialog,dialogProps:specificCredentialDialogProps,onCancel:()=>setShowSpecificCredentialDialog(false),onConfirm:onConfirmAsyncOption}),showCredentialListDialog&&/*#__PURE__*/_jsx(CredentialListDialog,{show:showCredentialListDialog,dialogProps:credentialListDialogProps,onCancel:()=>setShowCredentialListDialog(false),onCredentialSelected:onCredentialSelected})]});};export default CredentialInputHandler;","map":{"version":3,"names":["useRef","useState","IconButton","IconEdit","AsyncDropdown","AddEditCredentialDialog","CredentialListDialog","credentialsApi","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CredentialInputHandler","_ref","_data$credential","inputParam","data","onSelect","disabled","ref","credentialId","setCredentialId","credential","showCredentialListDialog","setShowCredentialListDialog","credentialListDialogProps","setCredentialListDialogProps","showSpecificCredentialDialog","setShowSpecificCredentialDialog","specificCredentialDialogProps","setSpecificCredentialDialogProps","reloadTimestamp","setReloadTimestamp","Date","now","toString","editCredential","dialogProp","type","cancelButtonName","confirmButtonName","addAsyncOption","names","credentialNames","length","join","componentCredentialsResp","getSpecificComponentCredential","Array","isArray","title","componentsCredentials","credentialComponent","error","console","onConfirmAsyncOption","selectedCredentialId","arguments","undefined","onCredentialSelected","children","style","marginTop","display","flexDirection","name","nodeData","value","isCreateNewOption","newValue","onCreateNew","color","size","onClick","show","dialogProps","onCancel","onConfirm"],"sources":["D:/Flowise/packages/ui/src/views/canvas/CredentialInputHandler.js"],"sourcesContent":["import PropTypes from 'prop-types'\r\nimport { useRef, useState } from 'react'\r\n\r\n// material-ui\r\nimport { IconButton } from '@mui/material'\r\nimport { IconEdit } from '@tabler/icons'\r\n\r\n// project import\r\nimport { AsyncDropdown } from 'ui-component/dropdown/AsyncDropdown'\r\nimport AddEditCredentialDialog from 'views/credentials/AddEditCredentialDialog'\r\nimport CredentialListDialog from 'views/credentials/CredentialListDialog'\r\n\r\n// API\r\nimport credentialsApi from 'api/credentials'\r\n\r\n// ===========================|| CredentialInputHandler ||=========================== //\r\n\r\nconst CredentialInputHandler = ({ inputParam, data, onSelect, disabled = false }) => {\r\n    const ref = useRef(null)\r\n    const [credentialId, setCredentialId] = useState(data?.credential ?? '')\r\n    const [showCredentialListDialog, setShowCredentialListDialog] = useState(false)\r\n    const [credentialListDialogProps, setCredentialListDialogProps] = useState({})\r\n    const [showSpecificCredentialDialog, setShowSpecificCredentialDialog] = useState(false)\r\n    const [specificCredentialDialogProps, setSpecificCredentialDialogProps] = useState({})\r\n    const [reloadTimestamp, setReloadTimestamp] = useState(Date.now().toString())\r\n\r\n    const editCredential = (credentialId) => {\r\n        const dialogProp = {\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            credentialId\r\n        }\r\n        setSpecificCredentialDialogProps(dialogProp)\r\n        setShowSpecificCredentialDialog(true)\r\n    }\r\n\r\n    const addAsyncOption = async () => {\r\n        try {\r\n            let names = ''\r\n            if (inputParam.credentialNames.length > 1) {\r\n                names = inputParam.credentialNames.join('&')\r\n            } else {\r\n                names = inputParam.credentialNames[0]\r\n            }\r\n            const componentCredentialsResp = await credentialsApi.getSpecificComponentCredential(names)\r\n            if (componentCredentialsResp.data) {\r\n                if (Array.isArray(componentCredentialsResp.data)) {\r\n                    const dialogProp = {\r\n                        title: 'Add New Credential',\r\n                        componentsCredentials: componentCredentialsResp.data\r\n                    }\r\n                    setCredentialListDialogProps(dialogProp)\r\n                    setShowCredentialListDialog(true)\r\n                } else {\r\n                    const dialogProp = {\r\n                        type: 'ADD',\r\n                        cancelButtonName: 'Cancel',\r\n                        confirmButtonName: 'Add',\r\n                        credentialComponent: componentCredentialsResp.data\r\n                    }\r\n                    setSpecificCredentialDialogProps(dialogProp)\r\n                    setShowSpecificCredentialDialog(true)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const onConfirmAsyncOption = (selectedCredentialId = '') => {\r\n        setCredentialId(selectedCredentialId)\r\n        setReloadTimestamp(Date.now().toString())\r\n        setSpecificCredentialDialogProps({})\r\n        setShowSpecificCredentialDialog(false)\r\n        onSelect(selectedCredentialId)\r\n    }\r\n\r\n    const onCredentialSelected = (credentialComponent) => {\r\n        setShowCredentialListDialog(false)\r\n        const dialogProp = {\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add',\r\n            credentialComponent\r\n        }\r\n        setSpecificCredentialDialogProps(dialogProp)\r\n        setShowSpecificCredentialDialog(true)\r\n    }\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            {inputParam && (\r\n                <>\r\n                    {inputParam.type === 'credential' && (\r\n                        <>\r\n                            <div style={{ marginTop: 10 }} />\r\n                            <div key={reloadTimestamp} style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                <AsyncDropdown\r\n                                    disabled={disabled}\r\n                                    name={inputParam.name}\r\n                                    nodeData={data}\r\n                                    value={credentialId ?? 'choose an option'}\r\n                                    isCreateNewOption={true}\r\n                                    credentialNames={inputParam.credentialNames}\r\n                                    onSelect={(newValue) => {\r\n                                        setCredentialId(newValue)\r\n                                        onSelect(newValue)\r\n                                    }}\r\n                                    onCreateNew={() => addAsyncOption(inputParam.name)}\r\n                                />\r\n                                {credentialId && (\r\n                                    <IconButton title='Edit' color='primary' size='small' onClick={() => editCredential(credentialId)}>\r\n                                        <IconEdit />\r\n                                    </IconButton>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n            {showSpecificCredentialDialog && (\r\n                <AddEditCredentialDialog\r\n                    show={showSpecificCredentialDialog}\r\n                    dialogProps={specificCredentialDialogProps}\r\n                    onCancel={() => setShowSpecificCredentialDialog(false)}\r\n                    onConfirm={onConfirmAsyncOption}\r\n                ></AddEditCredentialDialog>\r\n            )}\r\n            {showCredentialListDialog && (\r\n                <CredentialListDialog\r\n                    show={showCredentialListDialog}\r\n                    dialogProps={credentialListDialogProps}\r\n                    onCancel={() => setShowCredentialListDialog(false)}\r\n                    onCredentialSelected={onCredentialSelected}\r\n                ></CredentialListDialog>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nCredentialInputHandler.propTypes = {\r\n    inputParam: PropTypes.object,\r\n    data: PropTypes.object,\r\n    onSelect: PropTypes.func,\r\n    disabled: PropTypes.bool\r\n}\r\n\r\nexport default CredentialInputHandler\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}