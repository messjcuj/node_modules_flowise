{"ast":null,"code":"import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nconst jsonParseLinter = () => view => {\n  try {\n    JSON.parse(view.state.doc.toString());\n  } catch (e) {\n    if (!(e instanceof SyntaxError)) throw e;\n    const pos = getErrorPosition(e, view.state.doc);\n    return [{\n      from: pos,\n      message: e.message,\n      severity: 'error',\n      to: pos\n    }];\n  }\n  return [];\n};\nfunction getErrorPosition(error, doc) {\n  let m;\n  if (m = error.message.match(/at position (\\d+)/)) return Math.min(+m[1], doc.length);\n  if (m = error.message.match(/at line (\\d+) column (\\d+)/)) return Math.min(doc.line(+m[1]).from + +m[2] - 1, doc.length);\n  return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"json\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      Object: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\}/\n      }),\n      Array: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\]/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Object Array\": foldInside\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"[\", \"{\", '\"']\n    },\n    indentOnInput: /^\\s*[\\}\\]]$/\n  }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n  return new LanguageSupport(jsonLanguage);\n}\nexport { json, jsonLanguage, jsonParseLinter };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","foldNodeProp","foldInside","LanguageSupport","jsonParseLinter","view","JSON","parse","state","doc","toString","e","SyntaxError","pos","getErrorPosition","from","message","severity","to","error","m","match","Math","min","length","line","jsonLanguage","define","name","configure","props","add","Object","except","Array","languageData","closeBrackets","brackets","indentOnInput","json"],"sources":["D:/Flowise/node_modules/@codemirror/lang-json/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nconst jsonParseLinter = () => (view) => {\n    try {\n        JSON.parse(view.state.doc.toString());\n    }\n    catch (e) {\n        if (!(e instanceof SyntaxError))\n            throw e;\n        const pos = getErrorPosition(e, view.state.doc);\n        return [{\n                from: pos,\n                message: e.message,\n                severity: 'error',\n                to: pos\n            }];\n    }\n    return [];\n};\nfunction getErrorPosition(error, doc) {\n    let m;\n    if (m = error.message.match(/at position (\\d+)/))\n        return Math.min(+m[1], doc.length);\n    if (m = error.message.match(/at line (\\d+) column (\\d+)/))\n        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);\n    return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"json\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Object: /*@__PURE__*/continuedIndent({ except: /^\\s*\\}/ }),\n                Array: /*@__PURE__*/continuedIndent({ except: /^\\s*\\]/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Object Array\": foldInside\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n        indentOnInput: /^\\s*[\\}\\]]$/\n    }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n    return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,UAAU,EAAEC,cAAc,EAAEC,eAAe,EAAEC,YAAY,EAAEC,UAAU,EAAEC,eAAe,QAAQ,sBAAsB;;AAE7H;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAOC,IAAI,IAAK;EACpC,IAAI;IACAC,IAAI,CAACC,KAAK,CAACF,IAAI,CAACG,KAAK,CAACC,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC;EACzC,CAAC,CACD,OAAOC,CAAC,EAAE;IACN,IAAI,EAAEA,CAAC,YAAYC,WAAW,CAAC,EAC3B,MAAMD,CAAC;IACX,MAAME,GAAG,GAAGC,gBAAgB,CAACH,CAAC,EAAEN,IAAI,CAACG,KAAK,CAACC,GAAG,CAAC;IAC/C,OAAO,CAAC;MACAM,IAAI,EAAEF,GAAG;MACTG,OAAO,EAAEL,CAAC,CAACK,OAAO;MAClBC,QAAQ,EAAE,OAAO;MACjBC,EAAE,EAAEL;IACR,CAAC,CAAC;EACV;EACA,OAAO,EAAE;AACb,CAAC;AACD,SAASC,gBAAgBA,CAACK,KAAK,EAAEV,GAAG,EAAE;EAClC,IAAIW,CAAC;EACL,IAAIA,CAAC,GAAGD,KAAK,CAACH,OAAO,CAACK,KAAK,CAAC,mBAAmB,CAAC,EAC5C,OAAOC,IAAI,CAACC,GAAG,CAAC,CAACH,CAAC,CAAC,CAAC,CAAC,EAAEX,GAAG,CAACe,MAAM,CAAC;EACtC,IAAIJ,CAAC,GAAGD,KAAK,CAACH,OAAO,CAACK,KAAK,CAAC,4BAA4B,CAAC,EACrD,OAAOC,IAAI,CAACC,GAAG,CAACd,GAAG,CAACgB,IAAI,CAAC,CAACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAACL,IAAI,GAAI,CAACK,CAAC,CAAC,CAAC,CAAE,GAAG,CAAC,EAAEX,GAAG,CAACe,MAAM,CAAC;EACnE,OAAO,CAAC;AACZ;;AAEA;AACA;AACA;AACA,MAAME,YAAY,GAAG,aAAa5B,UAAU,CAAC6B,MAAM,CAAC;EAChDC,IAAI,EAAE,MAAM;EACZ/B,MAAM,EAAE,aAAaA,MAAM,CAACgC,SAAS,CAAC;IAClCC,KAAK,EAAE,CACH,aAAa/B,cAAc,CAACgC,GAAG,CAAC;MAC5BC,MAAM,EAAE,aAAahC,eAAe,CAAC;QAAEiC,MAAM,EAAE;MAAS,CAAC,CAAC;MAC1DC,KAAK,EAAE,aAAalC,eAAe,CAAC;QAAEiC,MAAM,EAAE;MAAS,CAAC;IAC5D,CAAC,CAAC,EACF,aAAahC,YAAY,CAAC8B,GAAG,CAAC;MAC1B,cAAc,EAAE7B;IACpB,CAAC,CAAC;EAEV,CAAC,CAAC;EACFiC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;IAAE,CAAC;IAC5CC,aAAa,EAAE;EACnB;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASC,IAAIA,CAAA,EAAG;EACZ,OAAO,IAAIpC,eAAe,CAACuB,YAAY,CAAC;AAC5C;AAEA,SAASa,IAAI,EAAEb,YAAY,EAAEtB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}