{"ast":null,"code":"import{useState,useRef,useEffect}from'react';import{useDispatch}from'react-redux';import{Button}from'@mui/material';import{IconDatabaseImport,IconX}from'@tabler/icons';// project import\nimport{StyledFab}from'ui-component/button/StyledFab';import VectorStoreDialog from'./VectorStoreDialog';// api\nimport vectorstoreApi from'api/vectorstore';// Hooks\nimport useNotifier from'utils/useNotifier';// Const\nimport{enqueueSnackbar as enqueueSnackbarAction,closeSnackbar as closeSnackbarAction}from'store/actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const VectorStorePopUp=_ref=>{let{chatflowid}=_ref;const dispatch=useDispatch();useNotifier();const enqueueSnackbar=function(){return dispatch(enqueueSnackbarAction(...arguments));};const closeSnackbar=function(){return dispatch(closeSnackbarAction(...arguments));};const[open,setOpen]=useState(false);const[showExpandDialog,setShowExpandDialog]=useState(false);const[expandDialogProps,setExpandDialogProps]=useState({});const anchorRef=useRef(null);const prevOpen=useRef(open);const handleToggle=()=>{setOpen(prevopen=>!prevopen);const props={open:true,title:'Upsert Vector Store',chatflowid};setExpandDialogProps(props);setShowExpandDialog(true);};const onUpsert=async()=>{try{await vectorstoreApi.upsertVectorStore(chatflowid,{});enqueueSnackbar({message:'Succesfully upserted vector store',options:{key:new Date().getTime()+Math.random(),variant:'success',action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}catch(error){const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);enqueueSnackbar({message:errorData,options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}};useEffect(()=>{if(prevOpen.current===true&&open===false){anchorRef.current.focus();}prevOpen.current=open;// eslint-disable-next-line react-hooks/exhaustive-deps\n},[open,chatflowid]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(StyledFab,{sx:{position:'absolute',right:80,top:20},ref:anchorRef,size:\"small\",color:\"teal\",\"aria-label\":\"upsert\",title:\"Upsert Vector Database\",onClick:handleToggle,children:open?/*#__PURE__*/_jsx(IconX,{}):/*#__PURE__*/_jsx(IconDatabaseImport,{})}),/*#__PURE__*/_jsx(VectorStoreDialog,{show:showExpandDialog,dialogProps:expandDialogProps,onUpsert:onUpsert,onCancel:()=>{setShowExpandDialog(false);setOpen(prevopen=>!prevopen);}})]});};","map":{"version":3,"names":["useState","useRef","useEffect","useDispatch","Button","IconDatabaseImport","IconX","StyledFab","VectorStoreDialog","vectorstoreApi","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","VectorStorePopUp","_ref","chatflowid","dispatch","arguments","open","setOpen","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","anchorRef","prevOpen","handleToggle","prevopen","props","title","onUpsert","upsertVectorStore","message","options","key","Date","getTime","Math","random","variant","action","style","color","onClick","children","error","errorData","response","data","concat","status","statusText","persist","current","focus","sx","position","right","top","ref","size","show","dialogProps","onCancel"],"sources":["D:/Flowise/packages/ui/src/views/vectorstore/VectorStorePopUp.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Button } from '@mui/material'\r\nimport { IconDatabaseImport, IconX } from '@tabler/icons'\r\n\r\n// project import\r\nimport { StyledFab } from 'ui-component/button/StyledFab'\r\nimport VectorStoreDialog from './VectorStoreDialog'\r\n\r\n// api\r\nimport vectorstoreApi from 'api/vectorstore'\r\n\r\n// Hooks\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// Const\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nexport const VectorStorePopUp = ({ chatflowid }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n\r\n    const anchorRef = useRef(null)\r\n    const prevOpen = useRef(open)\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevopen) => !prevopen)\r\n        const props = {\r\n            open: true,\r\n            title: 'Upsert Vector Store',\r\n            chatflowid\r\n        }\r\n        setExpandDialogProps(props)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    const onUpsert = async () => {\r\n        try {\r\n            await vectorstoreApi.upsertVectorStore(chatflowid, {})\r\n            enqueueSnackbar({\r\n                message: 'Succesfully upserted vector store',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus()\r\n        }\r\n        prevOpen.current = open\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [open, chatflowid])\r\n\r\n    return (\r\n        <>\r\n            <StyledFab\r\n                sx={{ position: 'absolute', right: 80, top: 20 }}\r\n                ref={anchorRef}\r\n                size='small'\r\n                color='teal'\r\n                aria-label='upsert'\r\n                title='Upsert Vector Database'\r\n                onClick={handleToggle}\r\n            >\r\n                {open ? <IconX /> : <IconDatabaseImport />}\r\n            </StyledFab>\r\n            <VectorStoreDialog\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onUpsert={onUpsert}\r\n                onCancel={() => {\r\n                    setShowExpandDialog(false)\r\n                    setOpen((prevopen) => !prevopen)\r\n                }}\r\n            ></VectorStoreDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nVectorStorePopUp.propTypes = { chatflowid: PropTypes.string }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}