{"ast":null,"code":"import moment from'moment';export const getUniqueNodeId=(nodeData,nodes)=>{// Get amount of same nodes\nlet totalSameNodes=0;for(let i=0;i<nodes.length;i+=1){const node=nodes[i];if(node.data.name===nodeData.name){totalSameNodes+=1;}}// Get unique id\nlet nodeId=\"\".concat(nodeData.name,\"_\").concat(totalSameNodes);for(let i=0;i<nodes.length;i+=1){const node=nodes[i];if(node.id===nodeId){totalSameNodes+=1;nodeId=\"\".concat(nodeData.name,\"_\").concat(totalSameNodes);}}return nodeId;};export const initializeDefaultNodeData=nodeParams=>{const initialValues={};for(let i=0;i<nodeParams.length;i+=1){const input=nodeParams[i];initialValues[input.name]=input.default||'';}return initialValues;};export const initNode=(nodeData,newNodeId)=>{const inputAnchors=[];const inputParams=[];const incoming=nodeData.inputs?nodeData.inputs.length:0;const outgoing=1;const whitelistTypes=['asyncOptions','options','multiOptions','datagrid','string','number','boolean','password','json','code','date','file','folder'];// Inputs\nfor(let i=0;i<incoming;i+=1){const newInput={...nodeData.inputs[i],id:\"\".concat(newNodeId,\"-input-\").concat(nodeData.inputs[i].name,\"-\").concat(nodeData.inputs[i].type)};if(whitelistTypes.includes(nodeData.inputs[i].type)){inputParams.push(newInput);}else{inputAnchors.push(newInput);}}// Credential\nif(nodeData.credential){const newInput={...nodeData.credential,id:\"\".concat(newNodeId,\"-input-\").concat(nodeData.credential.name,\"-\").concat(nodeData.credential.type)};inputParams.unshift(newInput);}// Outputs\nconst outputAnchors=[];for(let i=0;i<outgoing;i+=1){if(nodeData.outputs&&nodeData.outputs.length){var _nodeData$outputs$0$d;const options=[];for(let j=0;j<nodeData.outputs.length;j+=1){var _nodeData$outputs$j$b,_nodeData$outputs$j$d;let baseClasses='';let type='';const outputBaseClasses=(_nodeData$outputs$j$b=nodeData.outputs[j].baseClasses)!==null&&_nodeData$outputs$j$b!==void 0?_nodeData$outputs$j$b:[];if(outputBaseClasses.length>1){baseClasses=outputBaseClasses.join('|');type=outputBaseClasses.join(' | ');}else if(outputBaseClasses.length===1){baseClasses=outputBaseClasses[0];type=outputBaseClasses[0];}const newOutputOption={id:\"\".concat(newNodeId,\"-output-\").concat(nodeData.outputs[j].name,\"-\").concat(baseClasses),name:nodeData.outputs[j].name,label:nodeData.outputs[j].label,description:(_nodeData$outputs$j$d=nodeData.outputs[j].description)!==null&&_nodeData$outputs$j$d!==void 0?_nodeData$outputs$j$d:'',type};options.push(newOutputOption);}const newOutput={name:'output',label:'Output',type:'options',description:(_nodeData$outputs$0$d=nodeData.outputs[0].description)!==null&&_nodeData$outputs$0$d!==void 0?_nodeData$outputs$0$d:'',options,default:nodeData.outputs[0].name};outputAnchors.push(newOutput);}else{var _nodeData$description;const newOutput={id:\"\".concat(newNodeId,\"-output-\").concat(nodeData.name,\"-\").concat(nodeData.baseClasses.join('|')),name:nodeData.name,label:nodeData.type,description:(_nodeData$description=nodeData.description)!==null&&_nodeData$description!==void 0?_nodeData$description:'',type:nodeData.baseClasses.join(' | ')};outputAnchors.push(newOutput);}}/* Initial\r\n    inputs = [\r\n        {\r\n            label: 'field_label_1',\r\n            name: 'string'\r\n        },\r\n        {\r\n            label: 'field_label_2',\r\n            name: 'CustomType'\r\n        }\r\n    ]\r\n\r\n    =>  Convert to inputs, inputParams, inputAnchors\r\n\r\n    =>  inputs = { 'field': 'defaultvalue' } // Turn into inputs object with default values\r\n    \r\n    =>  // For inputs that are part of whitelistTypes\r\n        inputParams = [\r\n            {\r\n                label: 'field_label_1',\r\n                name: 'string'\r\n            }\r\n        ]\r\n\r\n    =>  // For inputs that are not part of whitelistTypes\r\n        inputAnchors = [\r\n            {\r\n                label: 'field_label_2',\r\n                name: 'CustomType'\r\n            }\r\n        ]\r\n    */ // Inputs\nif(nodeData.inputs){nodeData.inputAnchors=inputAnchors;nodeData.inputParams=inputParams;nodeData.inputs=initializeDefaultNodeData(nodeData.inputs);}else{nodeData.inputAnchors=[];nodeData.inputParams=[];nodeData.inputs={};}// Outputs\nif(nodeData.outputs){nodeData.outputs=initializeDefaultNodeData(outputAnchors);}else{nodeData.outputs={};}nodeData.outputAnchors=outputAnchors;// Credential\nif(nodeData.credential)nodeData.credential='';nodeData.id=newNodeId;return nodeData;};export const isValidConnection=(connection,reactFlowInstance)=>{const sourceHandle=connection.sourceHandle;const targetHandle=connection.targetHandle;const target=connection.target;//sourceHandle: \"llmChain_0-output-llmChain-BaseChain\"\n//targetHandle: \"mrlkAgentLLM_0-input-model-BaseLanguageModel\"\nlet sourceTypes=sourceHandle.split('-')[sourceHandle.split('-').length-1].split('|');sourceTypes=sourceTypes.map(s=>s.trim());let targetTypes=targetHandle.split('-')[targetHandle.split('-').length-1].split('|');targetTypes=targetTypes.map(t=>t.trim());if(targetTypes.some(t=>sourceTypes.includes(t))){let targetNode=reactFlowInstance.getNode(target);if(!targetNode){if(!reactFlowInstance.getEdges().find(e=>e.targetHandle===targetHandle)){return true;}}else{const targetNodeInputAnchor=targetNode.data.inputAnchors.find(ancr=>ancr.id===targetHandle)||targetNode.data.inputParams.find(ancr=>ancr.id===targetHandle);if(targetNodeInputAnchor&&!(targetNodeInputAnchor!==null&&targetNodeInputAnchor!==void 0&&targetNodeInputAnchor.list)&&!reactFlowInstance.getEdges().find(e=>e.targetHandle===targetHandle)||targetNodeInputAnchor!==null&&targetNodeInputAnchor!==void 0&&targetNodeInputAnchor.list){return true;}}}return false;};export const convertDateStringToDateObject=dateString=>{if(dateString===undefined||!dateString)return undefined;const date=moment(dateString);if(!date.isValid)return undefined;// Sat Sep 24 2022 07:30:14\nreturn new Date(date.year(),date.month(),date.date(),date.hours(),date.minutes());};export const getFileName=fileBase64=>{let fileNames=[];if(fileBase64.startsWith('[')&&fileBase64.endsWith(']')){const files=JSON.parse(fileBase64);for(const file of files){const splitDataURI=file.split(',');const filename=splitDataURI[splitDataURI.length-1].split(':')[1];fileNames.push(filename);}return fileNames.join(', ');}else{const splitDataURI=fileBase64.split(',');const filename=splitDataURI[splitDataURI.length-1].split(':')[1];return filename;}};export const getFolderName=base64ArrayStr=>{try{const base64Array=JSON.parse(base64ArrayStr);const filenames=[];for(let i=0;i<base64Array.length;i+=1){const fileBase64=base64Array[i];const splitDataURI=fileBase64.split(',');const filename=splitDataURI[splitDataURI.length-1].split(':')[1];filenames.push(filename);}return filenames.length?filenames.join(','):'';}catch(e){return'';}};export const generateExportFlowData=flowData=>{const nodes=flowData.nodes;const edges=flowData.edges;for(let i=0;i<nodes.length;i+=1){nodes[i].selected=false;const node=nodes[i];const newNodeData={id:node.data.id,label:node.data.label,version:node.data.version,name:node.data.name,type:node.data.type,baseClasses:node.data.baseClasses,tags:node.data.tags,category:node.data.category,description:node.data.description,inputParams:node.data.inputParams,inputAnchors:node.data.inputAnchors,inputs:{},outputAnchors:node.data.outputAnchors,outputs:node.data.outputs,selected:false};// Remove password, file & folder\nif(node.data.inputs&&Object.keys(node.data.inputs).length){const nodeDataInputs={};for(const input in node.data.inputs){const inputParam=node.data.inputParams.find(inp=>inp.name===input);if(inputParam&&inputParam.type==='password')continue;if(inputParam&&inputParam.type==='file')continue;if(inputParam&&inputParam.type==='folder')continue;nodeDataInputs[input]=node.data.inputs[input];}newNodeData.inputs=nodeDataInputs;}nodes[i].data=newNodeData;}const exportJson={nodes,edges};return exportJson;};export const getAvailableNodesForVariable=(nodes,edges,target,targetHandle)=>{// example edge id = \"llmChain_0-llmChain_0-output-outputPrediction-string|json-llmChain_1-llmChain_1-input-promptValues-string\"\n//                    {source}  -{sourceHandle}                           -{target}  -{targetHandle}\nconst parentNodes=[];const inputEdges=edges.filter(edg=>edg.target===target&&edg.targetHandle===targetHandle);if(inputEdges&&inputEdges.length){for(let j=0;j<inputEdges.length;j+=1){const node=nodes.find(nd=>nd.id===inputEdges[j].source);parentNodes.push(node);}}return parentNodes;};export const getUpsertDetails=(nodes,edges)=>{const vsNodes=nodes.filter(node=>node.data.category==='Vector Stores'&&!node.data.label.includes('Upsert')&&!node.data.label.includes('Load Existing'));const vsNodeIds=vsNodes.map(vs=>vs.data.id);const upsertNodes=[];const seenVsNodeIds=[];for(const edge of edges){if(vsNodeIds.includes(edge.source)||vsNodeIds.includes(edge.target)){const vsNode=vsNodes.find(node=>node.data.id===edge.source||node.data.id===edge.target);if(!vsNode||seenVsNodeIds.includes(vsNode.data.id))continue;seenVsNodeIds.push(vsNode.data.id);// Found Vector Store Node, proceed to find connected Document Loader node\nlet connectedDocs=[];if(vsNode.data.inputs.document)connectedDocs=[...new Set(vsNode.data.inputs.document)];if(connectedDocs.length){const innerNodes=[vsNode];if(vsNode.data.inputs.embeddings){const embeddingsId=vsNode.data.inputs.embeddings.replace(/{{|}}/g,'').split('.')[0];innerNodes.push(nodes.find(node=>node.data.id===embeddingsId));}for(const doc of connectedDocs){const docId=doc.replace(/{{|}}/g,'').split('.')[0];const docNode=nodes.find(node=>node.data.id===docId);if(docNode)innerNodes.push(docNode);// Found Document Loader Node, proceed to find connected Text Splitter node\nif(docNode&&docNode.data.inputs.textSplitter){const textSplitterId=docNode.data.inputs.textSplitter.replace(/{{|}}/g,'').split('.')[0];const textSplitterNode=nodes.find(node=>node.data.id===textSplitterId);if(textSplitterNode)innerNodes.push(textSplitterNode);}}upsertNodes.push({vectorNode:vsNode,nodes:innerNodes.reverse()});}}}return upsertNodes;};export const rearrangeToolsOrdering=(newValues,sourceNodeId)=>{// RequestsGet and RequestsPost have to be in order before other tools\nnewValues.push(\"{{\".concat(sourceNodeId,\".data.instance}}\"));const sortKey=item=>{if(item.includes('requestsGet')||item.includes('readFile')){return 0;}else if(item.includes('requestsPost')||item.includes('writeFile')){return 1;}else{return 2;}};newValues.sort((a,b)=>sortKey(a)-sortKey(b));};export const throttle=(func,limit)=>{let lastFunc;let lastRan;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(!lastRan){func(...args);lastRan=Date.now();}else{clearTimeout(lastFunc);lastFunc=setTimeout(()=>{if(Date.now()-lastRan>=limit){func(...args);lastRan=Date.now();}},limit-(Date.now()-lastRan));}};};export const generateRandomGradient=()=>{function randomColor(){var color='rgb(';for(var i=0;i<3;i++){var random=Math.floor(Math.random()*256);color+=random;if(i<2){color+=',';}}color+=')';return color;}var gradient='linear-gradient('+randomColor()+', '+randomColor()+')';return gradient;};export const getInputVariables=paramValue=>{let returnVal=paramValue;const variableStack=[];const inputVariables=[];let startIdx=0;const endIdx=returnVal.length;while(startIdx<endIdx){const substr=returnVal.substring(startIdx,startIdx+1);// Store the opening double curly bracket\nif(substr==='{'){variableStack.push({substr,startIdx:startIdx+1});}// Found the complete variable\nif(substr==='}'&&variableStack.length>0&&variableStack[variableStack.length-1].substr==='{'){const variableStartIdx=variableStack[variableStack.length-1].startIdx;const variableEndIdx=startIdx;const variableFullPath=returnVal.substring(variableStartIdx,variableEndIdx);inputVariables.push(variableFullPath);variableStack.pop();}startIdx+=1;}return inputVariables;};export const removeDuplicateURL=message=>{const visitedURLs=[];const newSourceDocuments=[];if(!message.sourceDocuments)return newSourceDocuments;message.sourceDocuments.forEach(source=>{if(source.metadata&&source.metadata.source){if(isValidURL(source.metadata.source)&&!visitedURLs.includes(source.metadata.source)){visitedURLs.push(source.metadata.source);newSourceDocuments.push(source);}else if(!isValidURL(source.metadata.source)){newSourceDocuments.push(source);}}else{newSourceDocuments.push(source);}});return newSourceDocuments;};export const isValidURL=url=>{try{return new URL(url);}catch(err){return undefined;}};export const formatDataGridRows=rows=>{try{const parsedRows=typeof rows==='string'?JSON.parse(rows):rows;return parsedRows.map((sch,index)=>{return{...sch,id:index};});}catch(e){return[];}};export const setLocalStorageChatflow=(chatflowid,chatId,chatHistory)=>{const chatDetails=localStorage.getItem(\"\".concat(chatflowid,\"_INTERNAL\"));const obj={};if(chatId)obj.chatId=chatId;if(chatHistory)obj.chatHistory=chatHistory;if(!chatDetails){localStorage.setItem(\"\".concat(chatflowid,\"_INTERNAL\"),JSON.stringify(obj));}else{try{const parsedChatDetails=JSON.parse(chatDetails);localStorage.setItem(\"\".concat(chatflowid,\"_INTERNAL\"),JSON.stringify({...parsedChatDetails,...obj}));}catch(e){const chatId=chatDetails;obj.chatId=chatId;localStorage.setItem(\"\".concat(chatflowid,\"_INTERNAL\"),JSON.stringify(obj));}}};export const unshiftFiles=configData=>{const filesConfig=configData.find(config=>config.name==='files');if(filesConfig){configData=configData.filter(config=>config.name!=='files');configData.unshift(filesConfig);}return configData;};export const getConfigExamplesForJS=(configData,bodyType,isMultiple,stopNodeId)=>{let finalStr='';configData=unshiftFiles(configData);const loop=Math.min(configData.length,4);for(let i=0;i<loop;i+=1){const config=configData[i];let exampleVal=\"\\\"example\\\"\";if(config.type==='string')exampleVal=\"\\\"example\\\"\";else if(config.type==='boolean')exampleVal=\"true\";else if(config.type==='number')exampleVal=\"1\";else if(config.type==='json')exampleVal=\"{ \\\"key\\\": \\\"val\\\" }\";else if(config.name==='files')exampleVal=\"input.files[0]\";finalStr+=bodyType==='json'?\"\\n      \\\"\".concat(config.name,\"\\\": \").concat(exampleVal,\",\"):\"formData.append(\\\"\".concat(config.name,\"\\\", \").concat(exampleVal,\")\\n\");if(i===loop-1&&bodyType!=='json')finalStr+=!isMultiple?\"\":stopNodeId?\"formData.append(\\\"stopNodeId\\\", \\\"\".concat(stopNodeId,\"\\\")\\n\"):\"formData.append(\\\"question\\\", \\\"Hey, how are you?\\\")\\n\";}return finalStr;};export const getConfigExamplesForPython=(configData,bodyType,isMultiple,stopNodeId)=>{let finalStr='';configData=unshiftFiles(configData);const loop=Math.min(configData.length,4);for(let i=0;i<loop;i+=1){const config=configData[i];let exampleVal=\"\\\"example\\\"\";if(config.type==='string')exampleVal=\"\\\"example\\\"\";else if(config.type==='boolean')exampleVal=\"true\";else if(config.type==='number')exampleVal=\"1\";else if(config.type==='json')exampleVal=\"{ \\\"key\\\": \\\"val\\\" }\";else if(config.name==='files')continue;finalStr+=bodyType==='json'?\"\\n        \\\"\".concat(config.name,\"\\\": \").concat(exampleVal,\",\"):\"\\n    \\\"\".concat(config.name,\"\\\": \").concat(exampleVal,\",\");if(i===loop-1&&bodyType!=='json')finalStr+=!isMultiple?\"\\n\":stopNodeId?\"\\n    \\\"stopNodeId\\\": \\\"\".concat(stopNodeId,\"\\\"\\n\"):\"\\n    \\\"question\\\": \\\"Hey, how are you?\\\"\\n\";}return finalStr;};export const getConfigExamplesForCurl=(configData,bodyType,isMultiple,stopNodeId)=>{let finalStr='';configData=unshiftFiles(configData);const loop=Math.min(configData.length,4);for(let i=0;i<loop;i+=1){const config=configData[i];let exampleVal=\"example\";if(config.type==='string')exampleVal=bodyType==='json'?\"\\\"example\\\"\":\"example\";else if(config.type==='boolean')exampleVal=\"true\";else if(config.type==='number')exampleVal=\"1\";else if(config.type==='json')exampleVal=\"{key:val}\";else if(config.name==='files')exampleVal=\"@/home/user1/Desktop/example\".concat(config.type.includes(',')?config.type.split(',')[0]:config.type);finalStr+=bodyType==='json'?\"\\\"\".concat(config.name,\"\\\": \").concat(exampleVal):\"\\n     -F \\\"\".concat(config.name,\"=\").concat(exampleVal,\"\\\"\");if(i===loop-1)finalStr+=bodyType==='json'?\" }\":!isMultiple?\"\":stopNodeId?\" \\\\\\n     -F \\\"stopNodeId=\".concat(stopNodeId,\"\\\"\"):\" \\\\\\n     -F \\\"question=Hey, how are you?\\\"\";else finalStr+=bodyType==='json'?\", \":\" \\\\\";}return finalStr;};","map":{"version":3,"names":["moment","getUniqueNodeId","nodeData","nodes","totalSameNodes","i","length","node","data","name","nodeId","concat","id","initializeDefaultNodeData","nodeParams","initialValues","input","default","initNode","newNodeId","inputAnchors","inputParams","incoming","inputs","outgoing","whitelistTypes","newInput","type","includes","push","credential","unshift","outputAnchors","outputs","_nodeData$outputs$0$d","options","j","_nodeData$outputs$j$b","_nodeData$outputs$j$d","baseClasses","outputBaseClasses","join","newOutputOption","label","description","newOutput","_nodeData$description","isValidConnection","connection","reactFlowInstance","sourceHandle","targetHandle","target","sourceTypes","split","map","s","trim","targetTypes","t","some","targetNode","getNode","getEdges","find","e","targetNodeInputAnchor","ancr","list","convertDateStringToDateObject","dateString","undefined","date","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","fileNames","startsWith","endsWith","files","JSON","parse","file","splitDataURI","filename","getFolderName","base64ArrayStr","base64Array","filenames","generateExportFlowData","flowData","edges","selected","newNodeData","version","tags","category","Object","keys","nodeDataInputs","inputParam","inp","exportJson","getAvailableNodesForVariable","parentNodes","inputEdges","filter","edg","nd","source","getUpsertDetails","vsNodes","vsNodeIds","vs","upsertNodes","seenVsNodeIds","edge","vsNode","connectedDocs","document","Set","innerNodes","embeddings","embeddingsId","replace","doc","docId","docNode","textSplitter","textSplitterId","textSplitterNode","vectorNode","reverse","rearrangeToolsOrdering","newValues","sourceNodeId","sortKey","item","sort","a","b","throttle","func","limit","lastFunc","lastRan","_len","arguments","args","Array","_key","now","clearTimeout","setTimeout","generateRandomGradient","randomColor","color","random","Math","floor","gradient","getInputVariables","paramValue","returnVal","variableStack","inputVariables","startIdx","endIdx","substr","substring","variableStartIdx","variableEndIdx","variableFullPath","pop","removeDuplicateURL","message","visitedURLs","newSourceDocuments","sourceDocuments","forEach","metadata","isValidURL","url","URL","err","formatDataGridRows","rows","parsedRows","sch","index","setLocalStorageChatflow","chatflowid","chatId","chatHistory","chatDetails","localStorage","getItem","obj","setItem","stringify","parsedChatDetails","unshiftFiles","configData","filesConfig","config","getConfigExamplesForJS","bodyType","isMultiple","stopNodeId","finalStr","loop","min","exampleVal","getConfigExamplesForPython","getConfigExamplesForCurl"],"sources":["D:/Flowise/packages/ui/src/utils/genericHelper.js"],"sourcesContent":["import moment from 'moment'\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`\r\n        }\r\n    }\r\n    return nodeId\r\n}\r\n\r\nexport const initializeDefaultNodeData = (nodeParams) => {\r\n    const initialValues = {}\r\n\r\n    for (let i = 0; i < nodeParams.length; i += 1) {\r\n        const input = nodeParams[i]\r\n        initialValues[input.name] = input.default || ''\r\n    }\r\n\r\n    return initialValues\r\n}\r\n\r\nexport const initNode = (nodeData, newNodeId) => {\r\n    const inputAnchors = []\r\n    const inputParams = []\r\n    const incoming = nodeData.inputs ? nodeData.inputs.length : 0\r\n    const outgoing = 1\r\n\r\n    const whitelistTypes = [\r\n        'asyncOptions',\r\n        'options',\r\n        'multiOptions',\r\n        'datagrid',\r\n        'string',\r\n        'number',\r\n        'boolean',\r\n        'password',\r\n        'json',\r\n        'code',\r\n        'date',\r\n        'file',\r\n        'folder'\r\n    ]\r\n\r\n    // Inputs\r\n    for (let i = 0; i < incoming; i += 1) {\r\n        const newInput = {\r\n            ...nodeData.inputs[i],\r\n            id: `${newNodeId}-input-${nodeData.inputs[i].name}-${nodeData.inputs[i].type}`\r\n        }\r\n        if (whitelistTypes.includes(nodeData.inputs[i].type)) {\r\n            inputParams.push(newInput)\r\n        } else {\r\n            inputAnchors.push(newInput)\r\n        }\r\n    }\r\n\r\n    // Credential\r\n    if (nodeData.credential) {\r\n        const newInput = {\r\n            ...nodeData.credential,\r\n            id: `${newNodeId}-input-${nodeData.credential.name}-${nodeData.credential.type}`\r\n        }\r\n        inputParams.unshift(newInput)\r\n    }\r\n\r\n    // Outputs\r\n    const outputAnchors = []\r\n    for (let i = 0; i < outgoing; i += 1) {\r\n        if (nodeData.outputs && nodeData.outputs.length) {\r\n            const options = []\r\n            for (let j = 0; j < nodeData.outputs.length; j += 1) {\r\n                let baseClasses = ''\r\n                let type = ''\r\n\r\n                const outputBaseClasses = nodeData.outputs[j].baseClasses ?? []\r\n                if (outputBaseClasses.length > 1) {\r\n                    baseClasses = outputBaseClasses.join('|')\r\n                    type = outputBaseClasses.join(' | ')\r\n                } else if (outputBaseClasses.length === 1) {\r\n                    baseClasses = outputBaseClasses[0]\r\n                    type = outputBaseClasses[0]\r\n                }\r\n\r\n                const newOutputOption = {\r\n                    id: `${newNodeId}-output-${nodeData.outputs[j].name}-${baseClasses}`,\r\n                    name: nodeData.outputs[j].name,\r\n                    label: nodeData.outputs[j].label,\r\n                    description: nodeData.outputs[j].description ?? '',\r\n                    type\r\n                }\r\n                options.push(newOutputOption)\r\n            }\r\n            const newOutput = {\r\n                name: 'output',\r\n                label: 'Output',\r\n                type: 'options',\r\n                description: nodeData.outputs[0].description ?? '',\r\n                options,\r\n                default: nodeData.outputs[0].name\r\n            }\r\n            outputAnchors.push(newOutput)\r\n        } else {\r\n            const newOutput = {\r\n                id: `${newNodeId}-output-${nodeData.name}-${nodeData.baseClasses.join('|')}`,\r\n                name: nodeData.name,\r\n                label: nodeData.type,\r\n                description: nodeData.description ?? '',\r\n                type: nodeData.baseClasses.join(' | ')\r\n            }\r\n            outputAnchors.push(newOutput)\r\n        }\r\n    }\r\n\r\n    /* Initial\r\n    inputs = [\r\n        {\r\n            label: 'field_label_1',\r\n            name: 'string'\r\n        },\r\n        {\r\n            label: 'field_label_2',\r\n            name: 'CustomType'\r\n        }\r\n    ]\r\n\r\n    =>  Convert to inputs, inputParams, inputAnchors\r\n\r\n    =>  inputs = { 'field': 'defaultvalue' } // Turn into inputs object with default values\r\n    \r\n    =>  // For inputs that are part of whitelistTypes\r\n        inputParams = [\r\n            {\r\n                label: 'field_label_1',\r\n                name: 'string'\r\n            }\r\n        ]\r\n\r\n    =>  // For inputs that are not part of whitelistTypes\r\n        inputAnchors = [\r\n            {\r\n                label: 'field_label_2',\r\n                name: 'CustomType'\r\n            }\r\n        ]\r\n    */\r\n\r\n    // Inputs\r\n    if (nodeData.inputs) {\r\n        nodeData.inputAnchors = inputAnchors\r\n        nodeData.inputParams = inputParams\r\n        nodeData.inputs = initializeDefaultNodeData(nodeData.inputs)\r\n    } else {\r\n        nodeData.inputAnchors = []\r\n        nodeData.inputParams = []\r\n        nodeData.inputs = {}\r\n    }\r\n\r\n    // Outputs\r\n    if (nodeData.outputs) {\r\n        nodeData.outputs = initializeDefaultNodeData(outputAnchors)\r\n    } else {\r\n        nodeData.outputs = {}\r\n    }\r\n    nodeData.outputAnchors = outputAnchors\r\n\r\n    // Credential\r\n    if (nodeData.credential) nodeData.credential = ''\r\n\r\n    nodeData.id = newNodeId\r\n\r\n    return nodeData\r\n}\r\n\r\nexport const isValidConnection = (connection, reactFlowInstance) => {\r\n    const sourceHandle = connection.sourceHandle\r\n    const targetHandle = connection.targetHandle\r\n    const target = connection.target\r\n\r\n    //sourceHandle: \"llmChain_0-output-llmChain-BaseChain\"\r\n    //targetHandle: \"mrlkAgentLLM_0-input-model-BaseLanguageModel\"\r\n\r\n    let sourceTypes = sourceHandle.split('-')[sourceHandle.split('-').length - 1].split('|')\r\n    sourceTypes = sourceTypes.map((s) => s.trim())\r\n    let targetTypes = targetHandle.split('-')[targetHandle.split('-').length - 1].split('|')\r\n    targetTypes = targetTypes.map((t) => t.trim())\r\n\r\n    if (targetTypes.some((t) => sourceTypes.includes(t))) {\r\n        let targetNode = reactFlowInstance.getNode(target)\r\n\r\n        if (!targetNode) {\r\n            if (!reactFlowInstance.getEdges().find((e) => e.targetHandle === targetHandle)) {\r\n                return true\r\n            }\r\n        } else {\r\n            const targetNodeInputAnchor =\r\n                targetNode.data.inputAnchors.find((ancr) => ancr.id === targetHandle) ||\r\n                targetNode.data.inputParams.find((ancr) => ancr.id === targetHandle)\r\n            if (\r\n                (targetNodeInputAnchor &&\r\n                    !targetNodeInputAnchor?.list &&\r\n                    !reactFlowInstance.getEdges().find((e) => e.targetHandle === targetHandle)) ||\r\n                targetNodeInputAnchor?.list\r\n            ) {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined\r\n\r\n    const date = moment(dateString)\r\n    if (!date.isValid) return undefined\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes())\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    let fileNames = []\r\n    if (fileBase64.startsWith('[') && fileBase64.endsWith(']')) {\r\n        const files = JSON.parse(fileBase64)\r\n        for (const file of files) {\r\n            const splitDataURI = file.split(',')\r\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n            fileNames.push(filename)\r\n        }\r\n        return fileNames.join(', ')\r\n    } else {\r\n        const splitDataURI = fileBase64.split(',')\r\n        const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n        return filename\r\n    }\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr)\r\n        const filenames = []\r\n        for (let i = 0; i < base64Array.length; i += 1) {\r\n            const fileBase64 = base64Array[i]\r\n            const splitDataURI = fileBase64.split(',')\r\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n            filenames.push(filename)\r\n        }\r\n        return filenames.length ? filenames.join(',') : ''\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes\r\n    const edges = flowData.edges\r\n\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        nodes[i].selected = false\r\n        const node = nodes[i]\r\n\r\n        const newNodeData = {\r\n            id: node.data.id,\r\n            label: node.data.label,\r\n            version: node.data.version,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            baseClasses: node.data.baseClasses,\r\n            tags: node.data.tags,\r\n            category: node.data.category,\r\n            description: node.data.description,\r\n            inputParams: node.data.inputParams,\r\n            inputAnchors: node.data.inputAnchors,\r\n            inputs: {},\r\n            outputAnchors: node.data.outputAnchors,\r\n            outputs: node.data.outputs,\r\n            selected: false\r\n        }\r\n\r\n        // Remove password, file & folder\r\n        if (node.data.inputs && Object.keys(node.data.inputs).length) {\r\n            const nodeDataInputs = {}\r\n            for (const input in node.data.inputs) {\r\n                const inputParam = node.data.inputParams.find((inp) => inp.name === input)\r\n                if (inputParam && inputParam.type === 'password') continue\r\n                if (inputParam && inputParam.type === 'file') continue\r\n                if (inputParam && inputParam.type === 'folder') continue\r\n                nodeDataInputs[input] = node.data.inputs[input]\r\n            }\r\n            newNodeData.inputs = nodeDataInputs\r\n        }\r\n\r\n        nodes[i].data = newNodeData\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    }\r\n    return exportJson\r\n}\r\n\r\nexport const getAvailableNodesForVariable = (nodes, edges, target, targetHandle) => {\r\n    // example edge id = \"llmChain_0-llmChain_0-output-outputPrediction-string|json-llmChain_1-llmChain_1-input-promptValues-string\"\r\n    //                    {source}  -{sourceHandle}                           -{target}  -{targetHandle}\r\n    const parentNodes = []\r\n    const inputEdges = edges.filter((edg) => edg.target === target && edg.targetHandle === targetHandle)\r\n    if (inputEdges && inputEdges.length) {\r\n        for (let j = 0; j < inputEdges.length; j += 1) {\r\n            const node = nodes.find((nd) => nd.id === inputEdges[j].source)\r\n            parentNodes.push(node)\r\n        }\r\n    }\r\n    return parentNodes\r\n}\r\n\r\nexport const getUpsertDetails = (nodes, edges) => {\r\n    const vsNodes = nodes.filter(\r\n        (node) =>\r\n            node.data.category === 'Vector Stores' && !node.data.label.includes('Upsert') && !node.data.label.includes('Load Existing')\r\n    )\r\n    const vsNodeIds = vsNodes.map((vs) => vs.data.id)\r\n\r\n    const upsertNodes = []\r\n    const seenVsNodeIds = []\r\n    for (const edge of edges) {\r\n        if (vsNodeIds.includes(edge.source) || vsNodeIds.includes(edge.target)) {\r\n            const vsNode = vsNodes.find((node) => node.data.id === edge.source || node.data.id === edge.target)\r\n            if (!vsNode || seenVsNodeIds.includes(vsNode.data.id)) continue\r\n            seenVsNodeIds.push(vsNode.data.id)\r\n\r\n            // Found Vector Store Node, proceed to find connected Document Loader node\r\n            let connectedDocs = []\r\n\r\n            if (vsNode.data.inputs.document) connectedDocs = [...new Set(vsNode.data.inputs.document)]\r\n\r\n            if (connectedDocs.length) {\r\n                const innerNodes = [vsNode]\r\n\r\n                if (vsNode.data.inputs.embeddings) {\r\n                    const embeddingsId = vsNode.data.inputs.embeddings.replace(/{{|}}/g, '').split('.')[0]\r\n                    innerNodes.push(nodes.find((node) => node.data.id === embeddingsId))\r\n                }\r\n\r\n                for (const doc of connectedDocs) {\r\n                    const docId = doc.replace(/{{|}}/g, '').split('.')[0]\r\n                    const docNode = nodes.find((node) => node.data.id === docId)\r\n                    if (docNode) innerNodes.push(docNode)\r\n\r\n                    // Found Document Loader Node, proceed to find connected Text Splitter node\r\n                    if (docNode && docNode.data.inputs.textSplitter) {\r\n                        const textSplitterId = docNode.data.inputs.textSplitter.replace(/{{|}}/g, '').split('.')[0]\r\n                        const textSplitterNode = nodes.find((node) => node.data.id === textSplitterId)\r\n                        if (textSplitterNode) innerNodes.push(textSplitterNode)\r\n                    }\r\n                }\r\n\r\n                upsertNodes.push({\r\n                    vectorNode: vsNode,\r\n                    nodes: innerNodes.reverse()\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return upsertNodes\r\n}\r\n\r\nexport const rearrangeToolsOrdering = (newValues, sourceNodeId) => {\r\n    // RequestsGet and RequestsPost have to be in order before other tools\r\n    newValues.push(`{{${sourceNodeId}.data.instance}}`)\r\n\r\n    const sortKey = (item) => {\r\n        if (item.includes('requestsGet') || item.includes('readFile')) {\r\n            return 0\r\n        } else if (item.includes('requestsPost') || item.includes('writeFile')) {\r\n            return 1\r\n        } else {\r\n            return 2\r\n        }\r\n    }\r\n\r\n    newValues.sort((a, b) => sortKey(a) - sortKey(b))\r\n}\r\n\r\nexport const throttle = (func, limit) => {\r\n    let lastFunc\r\n    let lastRan\r\n\r\n    return (...args) => {\r\n        if (!lastRan) {\r\n            func(...args)\r\n            lastRan = Date.now()\r\n        } else {\r\n            clearTimeout(lastFunc)\r\n            lastFunc = setTimeout(() => {\r\n                if (Date.now() - lastRan >= limit) {\r\n                    func(...args)\r\n                    lastRan = Date.now()\r\n                }\r\n            }, limit - (Date.now() - lastRan))\r\n        }\r\n    }\r\n}\r\n\r\nexport const generateRandomGradient = () => {\r\n    function randomColor() {\r\n        var color = 'rgb('\r\n        for (var i = 0; i < 3; i++) {\r\n            var random = Math.floor(Math.random() * 256)\r\n            color += random\r\n            if (i < 2) {\r\n                color += ','\r\n            }\r\n        }\r\n        color += ')'\r\n        return color\r\n    }\r\n\r\n    var gradient = 'linear-gradient(' + randomColor() + ', ' + randomColor() + ')'\r\n\r\n    return gradient\r\n}\r\n\r\nexport const getInputVariables = (paramValue) => {\r\n    let returnVal = paramValue\r\n    const variableStack = []\r\n    const inputVariables = []\r\n    let startIdx = 0\r\n    const endIdx = returnVal.length\r\n\r\n    while (startIdx < endIdx) {\r\n        const substr = returnVal.substring(startIdx, startIdx + 1)\r\n\r\n        // Store the opening double curly bracket\r\n        if (substr === '{') {\r\n            variableStack.push({ substr, startIdx: startIdx + 1 })\r\n        }\r\n\r\n        // Found the complete variable\r\n        if (substr === '}' && variableStack.length > 0 && variableStack[variableStack.length - 1].substr === '{') {\r\n            const variableStartIdx = variableStack[variableStack.length - 1].startIdx\r\n            const variableEndIdx = startIdx\r\n            const variableFullPath = returnVal.substring(variableStartIdx, variableEndIdx)\r\n            inputVariables.push(variableFullPath)\r\n            variableStack.pop()\r\n        }\r\n        startIdx += 1\r\n    }\r\n    return inputVariables\r\n}\r\n\r\nexport const removeDuplicateURL = (message) => {\r\n    const visitedURLs = []\r\n    const newSourceDocuments = []\r\n\r\n    if (!message.sourceDocuments) return newSourceDocuments\r\n\r\n    message.sourceDocuments.forEach((source) => {\r\n        if (source.metadata && source.metadata.source) {\r\n            if (isValidURL(source.metadata.source) && !visitedURLs.includes(source.metadata.source)) {\r\n                visitedURLs.push(source.metadata.source)\r\n                newSourceDocuments.push(source)\r\n            } else if (!isValidURL(source.metadata.source)) {\r\n                newSourceDocuments.push(source)\r\n            }\r\n        } else {\r\n            newSourceDocuments.push(source)\r\n        }\r\n    })\r\n    return newSourceDocuments\r\n}\r\n\r\nexport const isValidURL = (url) => {\r\n    try {\r\n        return new URL(url)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const formatDataGridRows = (rows) => {\r\n    try {\r\n        const parsedRows = typeof rows === 'string' ? JSON.parse(rows) : rows\r\n        return parsedRows.map((sch, index) => {\r\n            return {\r\n                ...sch,\r\n                id: index\r\n            }\r\n        })\r\n    } catch (e) {\r\n        return []\r\n    }\r\n}\r\n\r\nexport const setLocalStorageChatflow = (chatflowid, chatId, chatHistory) => {\r\n    const chatDetails = localStorage.getItem(`${chatflowid}_INTERNAL`)\r\n    const obj = {}\r\n    if (chatId) obj.chatId = chatId\r\n    if (chatHistory) obj.chatHistory = chatHistory\r\n\r\n    if (!chatDetails) {\r\n        localStorage.setItem(`${chatflowid}_INTERNAL`, JSON.stringify(obj))\r\n    } else {\r\n        try {\r\n            const parsedChatDetails = JSON.parse(chatDetails)\r\n            localStorage.setItem(`${chatflowid}_INTERNAL`, JSON.stringify({ ...parsedChatDetails, ...obj }))\r\n        } catch (e) {\r\n            const chatId = chatDetails\r\n            obj.chatId = chatId\r\n            localStorage.setItem(`${chatflowid}_INTERNAL`, JSON.stringify(obj))\r\n        }\r\n    }\r\n}\r\n\r\nexport const unshiftFiles = (configData) => {\r\n    const filesConfig = configData.find((config) => config.name === 'files')\r\n    if (filesConfig) {\r\n        configData = configData.filter((config) => config.name !== 'files')\r\n        configData.unshift(filesConfig)\r\n    }\r\n    return configData\r\n}\r\n\r\nexport const getConfigExamplesForJS = (configData, bodyType, isMultiple, stopNodeId) => {\r\n    let finalStr = ''\r\n    configData = unshiftFiles(configData)\r\n    const loop = Math.min(configData.length, 4)\r\n    for (let i = 0; i < loop; i += 1) {\r\n        const config = configData[i]\r\n        let exampleVal = `\"example\"`\r\n        if (config.type === 'string') exampleVal = `\"example\"`\r\n        else if (config.type === 'boolean') exampleVal = `true`\r\n        else if (config.type === 'number') exampleVal = `1`\r\n        else if (config.type === 'json') exampleVal = `{ \"key\": \"val\" }`\r\n        else if (config.name === 'files') exampleVal = `input.files[0]`\r\n        finalStr += bodyType === 'json' ? `\\n      \"${config.name}\": ${exampleVal},` : `formData.append(\"${config.name}\", ${exampleVal})\\n`\r\n        if (i === loop - 1 && bodyType !== 'json')\r\n            finalStr += !isMultiple\r\n                ? ``\r\n                : stopNodeId\r\n                ? `formData.append(\"stopNodeId\", \"${stopNodeId}\")\\n`\r\n                : `formData.append(\"question\", \"Hey, how are you?\")\\n`\r\n    }\r\n    return finalStr\r\n}\r\n\r\nexport const getConfigExamplesForPython = (configData, bodyType, isMultiple, stopNodeId) => {\r\n    let finalStr = ''\r\n    configData = unshiftFiles(configData)\r\n    const loop = Math.min(configData.length, 4)\r\n    for (let i = 0; i < loop; i += 1) {\r\n        const config = configData[i]\r\n        let exampleVal = `\"example\"`\r\n        if (config.type === 'string') exampleVal = `\"example\"`\r\n        else if (config.type === 'boolean') exampleVal = `true`\r\n        else if (config.type === 'number') exampleVal = `1`\r\n        else if (config.type === 'json') exampleVal = `{ \"key\": \"val\" }`\r\n        else if (config.name === 'files') continue\r\n        finalStr += bodyType === 'json' ? `\\n        \"${config.name}\": ${exampleVal},` : `\\n    \"${config.name}\": ${exampleVal},`\r\n        if (i === loop - 1 && bodyType !== 'json')\r\n            finalStr += !isMultiple\r\n                ? `\\n`\r\n                : stopNodeId\r\n                ? `\\n    \"stopNodeId\": \"${stopNodeId}\"\\n`\r\n                : `\\n    \"question\": \"Hey, how are you?\"\\n`\r\n    }\r\n    return finalStr\r\n}\r\n\r\nexport const getConfigExamplesForCurl = (configData, bodyType, isMultiple, stopNodeId) => {\r\n    let finalStr = ''\r\n    configData = unshiftFiles(configData)\r\n    const loop = Math.min(configData.length, 4)\r\n    for (let i = 0; i < loop; i += 1) {\r\n        const config = configData[i]\r\n        let exampleVal = `example`\r\n        if (config.type === 'string') exampleVal = bodyType === 'json' ? `\"example\"` : `example`\r\n        else if (config.type === 'boolean') exampleVal = `true`\r\n        else if (config.type === 'number') exampleVal = `1`\r\n        else if (config.type === 'json') exampleVal = `{key:val}`\r\n        else if (config.name === 'files')\r\n            exampleVal = `@/home/user1/Desktop/example${config.type.includes(',') ? config.type.split(',')[0] : config.type}`\r\n        finalStr += bodyType === 'json' ? `\"${config.name}\": ${exampleVal}` : `\\n     -F \"${config.name}=${exampleVal}\"`\r\n        if (i === loop - 1)\r\n            finalStr +=\r\n                bodyType === 'json'\r\n                    ? ` }`\r\n                    : !isMultiple\r\n                    ? ``\r\n                    : stopNodeId\r\n                    ? ` \\\\\\n     -F \"stopNodeId=${stopNodeId}\"`\r\n                    : ` \\\\\\n     -F \"question=Hey, how are you?\"`\r\n        else finalStr += bodyType === 'json' ? `, ` : ` \\\\`\r\n    }\r\n    return finalStr\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}