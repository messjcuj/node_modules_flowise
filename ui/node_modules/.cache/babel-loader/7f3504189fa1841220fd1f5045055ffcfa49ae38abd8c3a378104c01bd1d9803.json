{"ast":null,"code":"import{useEffect,useRef,useState,useCallback,useContext}from'react';import ReactFlow,{addEdge,Controls,Background,useNodesState,useEdgesState}from'reactflow';import'reactflow/dist/style.css';import{useDispatch,useSelector}from'react-redux';import{useNavigate,useLocation}from'react-router-dom';import{usePrompt}from'../../utils/usePrompt';import{REMOVE_DIRTY,SET_DIRTY,SET_CHATFLOW,enqueueSnackbar as enqueueSnackbarAction,closeSnackbar as closeSnackbarAction}from'store/actions';import{omit,cloneDeep}from'lodash';// material-ui\nimport{Toolbar,Box,AppBar,Button}from'@mui/material';import{useTheme}from'@mui/material/styles';// project imports\nimport CanvasNode from'./CanvasNode';import ButtonEdge from'./ButtonEdge';import StickyNote from'./StickyNote';import CanvasHeader from'./CanvasHeader';import AddNodes from'./AddNodes';import ConfirmDialog from'ui-component/dialog/ConfirmDialog';import{ChatPopUp}from'views/chatmessage/ChatPopUp';import{VectorStorePopUp}from'views/vectorstore/VectorStorePopUp';import{flowContext}from'store/context/ReactFlowContext';// API\nimport nodesApi from'api/nodes';import chatflowsApi from'api/chatflows';// Hooks\nimport useApi from'hooks/useApi';import useConfirm from'hooks/useConfirm';// icons\nimport{IconX}from'@tabler/icons';// utils\nimport{getUniqueNodeId,initNode,rearrangeToolsOrdering,getUpsertDetails}from'utils/genericHelper';import useNotifier from'utils/useNotifier';// const\nimport{FLOWISE_CREDENTIAL_ID}from'store/constant';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const nodeTypes={customNode:CanvasNode,stickyNote:StickyNote};const edgeTypes={buttonedge:ButtonEdge};// ==============================|| CANVAS ||============================== //\nconst Canvas=()=>{const theme=useTheme();const navigate=useNavigate();const{state}=useLocation();const templateFlowData=state?state.templateFlowData:'';const URLpath=document.location.pathname.toString().split('/');const chatflowId=URLpath[URLpath.length-1]==='canvas'?'':URLpath[URLpath.length-1];const{confirm}=useConfirm();const dispatch=useDispatch();const canvas=useSelector(state=>state.canvas);const[canvasDataStore,setCanvasDataStore]=useState(canvas);const[chatflow,setChatflow]=useState(null);const{reactFlowInstance,setReactFlowInstance}=useContext(flowContext);// ==============================|| Snackbar ||============================== //\nuseNotifier();const enqueueSnackbar=function(){return dispatch(enqueueSnackbarAction(...arguments));};const closeSnackbar=function(){return dispatch(closeSnackbarAction(...arguments));};// ==============================|| ReactFlow ||============================== //\nconst[nodes,setNodes,onNodesChange]=useNodesState();const[edges,setEdges,onEdgesChange]=useEdgesState();const[selectedNode,setSelectedNode]=useState(null);const[isUpsertButtonEnabled,setIsUpsertButtonEnabled]=useState(false);const reactFlowWrapper=useRef(null);// ==============================|| Chatflow API ||============================== //\nconst getNodesApi=useApi(nodesApi.getAllNodes);const createNewChatflowApi=useApi(chatflowsApi.createNewChatflow);const testChatflowApi=useApi(chatflowsApi.testChatflow);const updateChatflowApi=useApi(chatflowsApi.updateChatflow);const getSpecificChatflowApi=useApi(chatflowsApi.getSpecificChatflow);// ==============================|| Events & Actions ||============================== //\nconst onConnect=params=>{const newEdge={...params,type:'buttonedge',id:\"\".concat(params.source,\"-\").concat(params.sourceHandle,\"-\").concat(params.target,\"-\").concat(params.targetHandle)};const targetNodeId=params.targetHandle.split('-')[0];const sourceNodeId=params.sourceHandle.split('-')[0];const targetInput=params.targetHandle.split('-')[2];setNodes(nds=>nds.map(node=>{if(node.id===targetNodeId){setTimeout(()=>setDirty(),0);let value;const inputAnchor=node.data.inputAnchors.find(ancr=>ancr.name===targetInput);const inputParam=node.data.inputParams.find(param=>param.name===targetInput);if(inputAnchor&&inputAnchor.list){const newValues=node.data.inputs[targetInput]||[];if(targetInput==='tools'){rearrangeToolsOrdering(newValues,sourceNodeId);}else{newValues.push(\"{{\".concat(sourceNodeId,\".data.instance}}\"));}value=newValues;}else if(inputParam&&inputParam.acceptVariable){value=node.data.inputs[targetInput]||'';}else{value=\"{{\".concat(sourceNodeId,\".data.instance}}\");}node.data={...node.data,inputs:{...node.data.inputs,[targetInput]:value}};}return node;}));setEdges(eds=>addEdge(newEdge,eds));};const handleLoadFlow=file=>{try{const flowData=JSON.parse(file);const nodes=flowData.nodes||[];setNodes(nodes);setEdges(flowData.edges||[]);setDirty();}catch(e){console.error(e);}};const handleDeleteFlow=async()=>{const confirmPayload={title:\"Delete\",description:\"Delete chatflow \".concat(chatflow.name,\"?\"),confirmButtonName:'Delete',cancelButtonName:'Cancel'};const isConfirmed=await confirm(confirmPayload);if(isConfirmed){try{await chatflowsApi.deleteChatflow(chatflow.id);localStorage.removeItem(\"\".concat(chatflow.id,\"_INTERNAL\"));navigate('/');}catch(error){const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);enqueueSnackbar({message:errorData,options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}}};const handleSaveFlow=chatflowName=>{if(reactFlowInstance){const nodes=reactFlowInstance.getNodes().map(node=>{const nodeData=cloneDeep(node.data);if(Object.prototype.hasOwnProperty.call(nodeData.inputs,FLOWISE_CREDENTIAL_ID)){nodeData.credential=nodeData.inputs[FLOWISE_CREDENTIAL_ID];nodeData.inputs=omit(nodeData.inputs,[FLOWISE_CREDENTIAL_ID]);}node.data={...nodeData,selected:false};return node;});const rfInstanceObject=reactFlowInstance.toObject();rfInstanceObject.nodes=nodes;const flowData=JSON.stringify(rfInstanceObject);if(!chatflow.id){const newChatflowBody={name:chatflowName,deployed:false,isPublic:false,flowData};createNewChatflowApi.request(newChatflowBody);}else{const updateBody={name:chatflowName,flowData};updateChatflowApi.request(chatflow.id,updateBody);}}};// eslint-disable-next-line\nconst onNodeClick=useCallback((event,clickedNode)=>{setSelectedNode(clickedNode);setNodes(nds=>nds.map(node=>{if(node.id===clickedNode.id){node.data={...node.data,selected:true};}else{node.data={...node.data,selected:false};}return node;}));});const onDragOver=useCallback(event=>{event.preventDefault();event.dataTransfer.dropEffect='move';},[]);const onDrop=useCallback(event=>{event.preventDefault();const reactFlowBounds=reactFlowWrapper.current.getBoundingClientRect();let nodeData=event.dataTransfer.getData('application/reactflow');// check if the dropped element is valid\nif(typeof nodeData==='undefined'||!nodeData){return;}nodeData=JSON.parse(nodeData);const position=reactFlowInstance.project({x:event.clientX-reactFlowBounds.left-100,y:event.clientY-reactFlowBounds.top-50});const newNodeId=getUniqueNodeId(nodeData,reactFlowInstance.getNodes());const newNode={id:newNodeId,position,type:nodeData.type!=='StickyNote'?'customNode':'stickyNote',data:initNode(nodeData,newNodeId)};setSelectedNode(newNode);setNodes(nds=>nds.concat(newNode).map(node=>{if(node.id===newNode.id){node.data={...node.data,selected:true};}else{node.data={...node.data,selected:false};}return node;}));setTimeout(()=>setDirty(),0);},// eslint-disable-next-line\n[reactFlowInstance]);const saveChatflowSuccess=()=>{dispatch({type:REMOVE_DIRTY});enqueueSnackbar({message:'Chatflow saved',options:{key:new Date().getTime()+Math.random(),variant:'success',action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});};const errorFailed=message=>{enqueueSnackbar({message,options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});};const setDirty=()=>{dispatch({type:SET_DIRTY});};const checkIfUpsertAvailable=(nodes,edges)=>{const upsertNodeDetails=getUpsertDetails(nodes,edges);if(upsertNodeDetails.length)setIsUpsertButtonEnabled(true);else setIsUpsertButtonEnabled(false);};// ==============================|| useEffect ||============================== //\n// Get specific chatflow successful\nuseEffect(()=>{if(getSpecificChatflowApi.data){const chatflow=getSpecificChatflowApi.data;const initialFlow=chatflow.flowData?JSON.parse(chatflow.flowData):[];setNodes(initialFlow.nodes||[]);setEdges(initialFlow.edges||[]);dispatch({type:SET_CHATFLOW,chatflow});}else if(getSpecificChatflowApi.error){const error=getSpecificChatflowApi.error;const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);errorFailed(\"Failed to retrieve chatflow: \".concat(errorData));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[getSpecificChatflowApi.data,getSpecificChatflowApi.error]);// Create new chatflow successful\nuseEffect(()=>{if(createNewChatflowApi.data){const chatflow=createNewChatflowApi.data;dispatch({type:SET_CHATFLOW,chatflow});saveChatflowSuccess();window.history.replaceState(null,null,\"/canvas/\".concat(chatflow.id));}else if(createNewChatflowApi.error){const error=createNewChatflowApi.error;const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);errorFailed(\"Failed to save chatflow: \".concat(errorData));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[createNewChatflowApi.data,createNewChatflowApi.error]);// Update chatflow successful\nuseEffect(()=>{if(updateChatflowApi.data){dispatch({type:SET_CHATFLOW,chatflow:updateChatflowApi.data});saveChatflowSuccess();}else if(updateChatflowApi.error){const error=updateChatflowApi.error;const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);errorFailed(\"Failed to save chatflow: \".concat(errorData));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[updateChatflowApi.data,updateChatflowApi.error]);// Test chatflow failed\nuseEffect(()=>{if(testChatflowApi.error){enqueueSnackbar({message:'Test chatflow failed',options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[testChatflowApi.error]);useEffect(()=>{setChatflow(canvasDataStore.chatflow);if(canvasDataStore.chatflow){const flowData=canvasDataStore.chatflow.flowData?JSON.parse(canvasDataStore.chatflow.flowData):[];checkIfUpsertAvailable(flowData.nodes||[],flowData.edges||[]);}},[canvasDataStore.chatflow]);// Initialization\nuseEffect(()=>{if(chatflowId){getSpecificChatflowApi.request(chatflowId);}else{if(localStorage.getItem('duplicatedFlowData')){handleLoadFlow(localStorage.getItem('duplicatedFlowData'));setTimeout(()=>localStorage.removeItem('duplicatedFlowData'),0);}else{setNodes([]);setEdges([]);}dispatch({type:SET_CHATFLOW,chatflow:{name:'Untitled chatflow'}});}getNodesApi.request();// Clear dirty state before leaving and remove any ongoing test triggers and webhooks\nreturn()=>{setTimeout(()=>dispatch({type:REMOVE_DIRTY}),0);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{setCanvasDataStore(canvas);},[canvas]);useEffect(()=>{function handlePaste(e){const pasteData=e.clipboardData.getData('text');//TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\nif(pasteData.includes('{\"nodes\":[')&&pasteData.includes('],\"edges\":[')){handleLoadFlow(pasteData);}}window.addEventListener('paste',handlePaste);return()=>{window.removeEventListener('paste',handlePaste);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{if(templateFlowData&&templateFlowData.includes('\"nodes\":[')&&templateFlowData.includes('],\"edges\":[')){handleLoadFlow(templateFlowData);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[templateFlowData]);usePrompt('You have unsaved changes! Do you want to navigate away?',canvasDataStore.isDirty);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(AppBar,{enableColorOnDark:true,position:\"fixed\",color:\"inherit\",elevation:1,sx:{bgcolor:theme.palette.background.default},children:/*#__PURE__*/_jsx(Toolbar,{children:/*#__PURE__*/_jsx(CanvasHeader,{chatflow:chatflow,handleSaveFlow:handleSaveFlow,handleDeleteFlow:handleDeleteFlow,handleLoadFlow:handleLoadFlow})})}),/*#__PURE__*/_jsx(Box,{sx:{pt:'70px',height:'100vh',width:'100%'},children:/*#__PURE__*/_jsx(\"div\",{className:\"reactflow-parent-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"reactflow-wrapper\",ref:reactFlowWrapper,children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onNodeClick:onNodeClick,onEdgesChange:onEdgesChange,onDrop:onDrop,onDragOver:onDragOver,onNodeDragStop:setDirty,nodeTypes:nodeTypes,edgeTypes:edgeTypes,onConnect:onConnect,onInit:setReactFlowInstance,fitView:true,deleteKeyCode:canvas.canvasDialogShow?null:['Backspace','Delete'],minZoom:0.1,children:[/*#__PURE__*/_jsx(Controls,{style:{display:'flex',flexDirection:'row',left:'50%',transform:'translate(-50%, -50%)'}}),/*#__PURE__*/_jsx(Background,{color:\"#aaa\",gap:16}),/*#__PURE__*/_jsx(AddNodes,{nodesData:getNodesApi.data,node:selectedNode}),isUpsertButtonEnabled&&/*#__PURE__*/_jsx(VectorStorePopUp,{chatflowid:chatflowId}),/*#__PURE__*/_jsx(ChatPopUp,{chatflowid:chatflowId})]})})})}),/*#__PURE__*/_jsx(ConfirmDialog,{})]})});};export default Canvas;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useContext","ReactFlow","addEdge","Controls","Background","useNodesState","useEdgesState","useDispatch","useSelector","useNavigate","useLocation","usePrompt","REMOVE_DIRTY","SET_DIRTY","SET_CHATFLOW","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","omit","cloneDeep","Toolbar","Box","AppBar","Button","useTheme","CanvasNode","ButtonEdge","StickyNote","CanvasHeader","AddNodes","ConfirmDialog","ChatPopUp","VectorStorePopUp","flowContext","nodesApi","chatflowsApi","useApi","useConfirm","IconX","getUniqueNodeId","initNode","rearrangeToolsOrdering","getUpsertDetails","useNotifier","FLOWISE_CREDENTIAL_ID","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","nodeTypes","customNode","stickyNote","edgeTypes","buttonedge","Canvas","theme","navigate","state","templateFlowData","URLpath","document","location","pathname","toString","split","chatflowId","length","confirm","dispatch","canvas","canvasDataStore","setCanvasDataStore","chatflow","setChatflow","reactFlowInstance","setReactFlowInstance","arguments","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","isUpsertButtonEnabled","setIsUpsertButtonEnabled","reactFlowWrapper","getNodesApi","getAllNodes","createNewChatflowApi","createNewChatflow","testChatflowApi","testChatflow","updateChatflowApi","updateChatflow","getSpecificChatflowApi","getSpecificChatflow","onConnect","params","newEdge","type","id","concat","source","sourceHandle","target","targetHandle","targetNodeId","sourceNodeId","targetInput","nds","map","node","setTimeout","setDirty","value","inputAnchor","data","inputAnchors","find","ancr","name","inputParam","inputParams","param","list","newValues","inputs","push","acceptVariable","eds","handleLoadFlow","file","flowData","JSON","parse","e","console","error","handleDeleteFlow","confirmPayload","title","description","confirmButtonName","cancelButtonName","isConfirmed","deleteChatflow","localStorage","removeItem","errorData","response","status","statusText","message","options","key","Date","getTime","Math","random","variant","persist","action","style","color","onClick","children","handleSaveFlow","chatflowName","getNodes","nodeData","Object","prototype","hasOwnProperty","call","credential","selected","rfInstanceObject","toObject","stringify","newChatflowBody","deployed","isPublic","request","updateBody","onNodeClick","event","clickedNode","onDragOver","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","position","project","x","clientX","left","y","clientY","top","newNodeId","newNode","saveChatflowSuccess","errorFailed","checkIfUpsertAvailable","upsertNodeDetails","initialFlow","window","history","replaceState","getItem","handlePaste","pasteData","clipboardData","includes","addEventListener","removeEventListener","isDirty","enableColorOnDark","elevation","sx","bgcolor","palette","background","default","pt","height","width","className","ref","onNodeDragStop","onInit","fitView","deleteKeyCode","canvasDialogShow","minZoom","display","flexDirection","transform","gap","nodesData","chatflowid"],"sources":["D:/Flowise/packages/ui/src/views/canvas/index.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback, useContext } from 'react'\r\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState } from 'reactflow'\r\nimport 'reactflow/dist/style.css'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { usePrompt } from '../../utils/usePrompt'\r\nimport {\r\n    REMOVE_DIRTY,\r\n    SET_DIRTY,\r\n    SET_CHATFLOW,\r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction\r\n} from 'store/actions'\r\nimport { omit, cloneDeep } from 'lodash'\r\n\r\n// material-ui\r\nimport { Toolbar, Box, AppBar, Button } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport CanvasNode from './CanvasNode'\r\nimport ButtonEdge from './ButtonEdge'\r\nimport StickyNote from './StickyNote'\r\nimport CanvasHeader from './CanvasHeader'\r\nimport AddNodes from './AddNodes'\r\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\r\nimport { ChatPopUp } from 'views/chatmessage/ChatPopUp'\r\nimport { VectorStorePopUp } from 'views/vectorstore/VectorStorePopUp'\r\nimport { flowContext } from 'store/context/ReactFlowContext'\r\n\r\n// API\r\nimport nodesApi from 'api/nodes'\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\nimport useConfirm from 'hooks/useConfirm'\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// utils\r\nimport { getUniqueNodeId, initNode, rearrangeToolsOrdering, getUpsertDetails } from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// const\r\nimport { FLOWISE_CREDENTIAL_ID } from 'store/constant'\r\n\r\nconst nodeTypes = { customNode: CanvasNode, stickyNote: StickyNote }\r\nconst edgeTypes = { buttonedge: ButtonEdge }\r\n\r\n// ==============================|| CANVAS ||============================== //\r\n\r\nconst Canvas = () => {\r\n    const theme = useTheme()\r\n    const navigate = useNavigate()\r\n\r\n    const { state } = useLocation()\r\n    const templateFlowData = state ? state.templateFlowData : ''\r\n\r\n    const URLpath = document.location.pathname.toString().split('/')\r\n    const chatflowId = URLpath[URLpath.length - 1] === 'canvas' ? '' : URLpath[URLpath.length - 1]\r\n\r\n    const { confirm } = useConfirm()\r\n\r\n    const dispatch = useDispatch()\r\n    const canvas = useSelector((state) => state.canvas)\r\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\r\n    const [chatflow, setChatflow] = useState(null)\r\n\r\n    const { reactFlowInstance, setReactFlowInstance } = useContext(flowContext)\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    // ==============================|| ReactFlow ||============================== //\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState()\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\r\n\r\n    const [selectedNode, setSelectedNode] = useState(null)\r\n    const [isUpsertButtonEnabled, setIsUpsertButtonEnabled] = useState(false)\r\n\r\n    const reactFlowWrapper = useRef(null)\r\n\r\n    // ==============================|| Chatflow API ||============================== //\r\n\r\n    const getNodesApi = useApi(nodesApi.getAllNodes)\r\n    const createNewChatflowApi = useApi(chatflowsApi.createNewChatflow)\r\n    const testChatflowApi = useApi(chatflowsApi.testChatflow)\r\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\r\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\r\n\r\n    // ==============================|| Events & Actions ||============================== //\r\n\r\n    const onConnect = (params) => {\r\n        const newEdge = {\r\n            ...params,\r\n            type: 'buttonedge',\r\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`\r\n        }\r\n\r\n        const targetNodeId = params.targetHandle.split('-')[0]\r\n        const sourceNodeId = params.sourceHandle.split('-')[0]\r\n        const targetInput = params.targetHandle.split('-')[2]\r\n\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === targetNodeId) {\r\n                    setTimeout(() => setDirty(), 0)\r\n                    let value\r\n                    const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\r\n                    const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\r\n\r\n                    if (inputAnchor && inputAnchor.list) {\r\n                        const newValues = node.data.inputs[targetInput] || []\r\n                        if (targetInput === 'tools') {\r\n                            rearrangeToolsOrdering(newValues, sourceNodeId)\r\n                        } else {\r\n                            newValues.push(`{{${sourceNodeId}.data.instance}}`)\r\n                        }\r\n                        value = newValues\r\n                    } else if (inputParam && inputParam.acceptVariable) {\r\n                        value = node.data.inputs[targetInput] || ''\r\n                    } else {\r\n                        value = `{{${sourceNodeId}.data.instance}}`\r\n                    }\r\n                    node.data = {\r\n                        ...node.data,\r\n                        inputs: {\r\n                            ...node.data.inputs,\r\n                            [targetInput]: value\r\n                        }\r\n                    }\r\n                }\r\n                return node\r\n            })\r\n        )\r\n\r\n        setEdges((eds) => addEdge(newEdge, eds))\r\n    }\r\n\r\n    const handleLoadFlow = (file) => {\r\n        try {\r\n            const flowData = JSON.parse(file)\r\n            const nodes = flowData.nodes || []\r\n\r\n            setNodes(nodes)\r\n            setEdges(flowData.edges || [])\r\n            setDirty()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const handleDeleteFlow = async () => {\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete chatflow ${chatflow.name}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                await chatflowsApi.deleteChatflow(chatflow.id)\r\n                localStorage.removeItem(`${chatflow.id}_INTERNAL`)\r\n                navigate('/')\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSaveFlow = (chatflowName) => {\r\n        if (reactFlowInstance) {\r\n            const nodes = reactFlowInstance.getNodes().map((node) => {\r\n                const nodeData = cloneDeep(node.data)\r\n                if (Object.prototype.hasOwnProperty.call(nodeData.inputs, FLOWISE_CREDENTIAL_ID)) {\r\n                    nodeData.credential = nodeData.inputs[FLOWISE_CREDENTIAL_ID]\r\n                    nodeData.inputs = omit(nodeData.inputs, [FLOWISE_CREDENTIAL_ID])\r\n                }\r\n                node.data = {\r\n                    ...nodeData,\r\n                    selected: false\r\n                }\r\n                return node\r\n            })\r\n\r\n            const rfInstanceObject = reactFlowInstance.toObject()\r\n            rfInstanceObject.nodes = nodes\r\n            const flowData = JSON.stringify(rfInstanceObject)\r\n\r\n            if (!chatflow.id) {\r\n                const newChatflowBody = {\r\n                    name: chatflowName,\r\n                    deployed: false,\r\n                    isPublic: false,\r\n                    flowData\r\n                }\r\n                createNewChatflowApi.request(newChatflowBody)\r\n            } else {\r\n                const updateBody = {\r\n                    name: chatflowName,\r\n                    flowData\r\n                }\r\n                updateChatflowApi.request(chatflow.id, updateBody)\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeClick = useCallback((event, clickedNode) => {\r\n        setSelectedNode(clickedNode)\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === clickedNode.id) {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: true\r\n                    }\r\n                } else {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: false\r\n                    }\r\n                }\r\n\r\n                return node\r\n            })\r\n        )\r\n    })\r\n\r\n    const onDragOver = useCallback((event) => {\r\n        event.preventDefault()\r\n        event.dataTransfer.dropEffect = 'move'\r\n    }, [])\r\n\r\n    const onDrop = useCallback(\r\n        (event) => {\r\n            event.preventDefault()\r\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\r\n            let nodeData = event.dataTransfer.getData('application/reactflow')\r\n\r\n            // check if the dropped element is valid\r\n            if (typeof nodeData === 'undefined' || !nodeData) {\r\n                return\r\n            }\r\n\r\n            nodeData = JSON.parse(nodeData)\r\n\r\n            const position = reactFlowInstance.project({\r\n                x: event.clientX - reactFlowBounds.left - 100,\r\n                y: event.clientY - reactFlowBounds.top - 50\r\n            })\r\n\r\n            const newNodeId = getUniqueNodeId(nodeData, reactFlowInstance.getNodes())\r\n\r\n            const newNode = {\r\n                id: newNodeId,\r\n                position,\r\n                type: nodeData.type !== 'StickyNote' ? 'customNode' : 'stickyNote',\r\n                data: initNode(nodeData, newNodeId)\r\n            }\r\n\r\n            setSelectedNode(newNode)\r\n            setNodes((nds) =>\r\n                nds.concat(newNode).map((node) => {\r\n                    if (node.id === newNode.id) {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            selected: true\r\n                        }\r\n                    } else {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            selected: false\r\n                        }\r\n                    }\r\n\r\n                    return node\r\n                })\r\n            )\r\n            setTimeout(() => setDirty(), 0)\r\n        },\r\n\r\n        // eslint-disable-next-line\r\n        [reactFlowInstance]\r\n    )\r\n\r\n    const saveChatflowSuccess = () => {\r\n        dispatch({ type: REMOVE_DIRTY })\r\n        enqueueSnackbar({\r\n            message: 'Chatflow saved',\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'success',\r\n                action: (key) => (\r\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                        <IconX />\r\n                    </Button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const errorFailed = (message) => {\r\n        enqueueSnackbar({\r\n            message,\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'error',\r\n                persist: true,\r\n                action: (key) => (\r\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                        <IconX />\r\n                    </Button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const setDirty = () => {\r\n        dispatch({ type: SET_DIRTY })\r\n    }\r\n\r\n    const checkIfUpsertAvailable = (nodes, edges) => {\r\n        const upsertNodeDetails = getUpsertDetails(nodes, edges)\r\n        if (upsertNodeDetails.length) setIsUpsertButtonEnabled(true)\r\n        else setIsUpsertButtonEnabled(false)\r\n    }\r\n\r\n    // ==============================|| useEffect ||============================== //\r\n\r\n    // Get specific chatflow successful\r\n    useEffect(() => {\r\n        if (getSpecificChatflowApi.data) {\r\n            const chatflow = getSpecificChatflowApi.data\r\n            const initialFlow = chatflow.flowData ? JSON.parse(chatflow.flowData) : []\r\n            setNodes(initialFlow.nodes || [])\r\n            setEdges(initialFlow.edges || [])\r\n            dispatch({ type: SET_CHATFLOW, chatflow })\r\n        } else if (getSpecificChatflowApi.error) {\r\n            const error = getSpecificChatflowApi.error\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            errorFailed(`Failed to retrieve chatflow: ${errorData}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificChatflowApi.data, getSpecificChatflowApi.error])\r\n\r\n    // Create new chatflow successful\r\n    useEffect(() => {\r\n        if (createNewChatflowApi.data) {\r\n            const chatflow = createNewChatflowApi.data\r\n            dispatch({ type: SET_CHATFLOW, chatflow })\r\n            saveChatflowSuccess()\r\n            window.history.replaceState(null, null, `/canvas/${chatflow.id}`)\r\n        } else if (createNewChatflowApi.error) {\r\n            const error = createNewChatflowApi.error\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            errorFailed(`Failed to save chatflow: ${errorData}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [createNewChatflowApi.data, createNewChatflowApi.error])\r\n\r\n    // Update chatflow successful\r\n    useEffect(() => {\r\n        if (updateChatflowApi.data) {\r\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\r\n            saveChatflowSuccess()\r\n        } else if (updateChatflowApi.error) {\r\n            const error = updateChatflowApi.error\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            errorFailed(`Failed to save chatflow: ${errorData}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateChatflowApi.data, updateChatflowApi.error])\r\n\r\n    // Test chatflow failed\r\n    useEffect(() => {\r\n        if (testChatflowApi.error) {\r\n            enqueueSnackbar({\r\n                message: 'Test chatflow failed',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testChatflowApi.error])\r\n\r\n    useEffect(() => {\r\n        setChatflow(canvasDataStore.chatflow)\r\n        if (canvasDataStore.chatflow) {\r\n            const flowData = canvasDataStore.chatflow.flowData ? JSON.parse(canvasDataStore.chatflow.flowData) : []\r\n            checkIfUpsertAvailable(flowData.nodes || [], flowData.edges || [])\r\n        }\r\n    }, [canvasDataStore.chatflow])\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (chatflowId) {\r\n            getSpecificChatflowApi.request(chatflowId)\r\n        } else {\r\n            if (localStorage.getItem('duplicatedFlowData')) {\r\n                handleLoadFlow(localStorage.getItem('duplicatedFlowData'))\r\n                setTimeout(() => localStorage.removeItem('duplicatedFlowData'), 0)\r\n            } else {\r\n                setNodes([])\r\n                setEdges([])\r\n            }\r\n            dispatch({\r\n                type: SET_CHATFLOW,\r\n                chatflow: {\r\n                    name: 'Untitled chatflow'\r\n                }\r\n            })\r\n        }\r\n\r\n        getNodesApi.request()\r\n\r\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\r\n        return () => {\r\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setCanvasDataStore(canvas)\r\n    }, [canvas])\r\n\r\n    useEffect(() => {\r\n        function handlePaste(e) {\r\n            const pasteData = e.clipboardData.getData('text')\r\n            //TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\r\n            if (pasteData.includes('{\"nodes\":[') && pasteData.includes('],\"edges\":[')) {\r\n                handleLoadFlow(pasteData)\r\n            }\r\n        }\r\n\r\n        window.addEventListener('paste', handlePaste)\r\n\r\n        return () => {\r\n            window.removeEventListener('paste', handlePaste)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (templateFlowData && templateFlowData.includes('\"nodes\":[') && templateFlowData.includes('],\"edges\":[')) {\r\n            handleLoadFlow(templateFlowData)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [templateFlowData])\r\n\r\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <AppBar\r\n                    enableColorOnDark\r\n                    position='fixed'\r\n                    color='inherit'\r\n                    elevation={1}\r\n                    sx={{\r\n                        bgcolor: theme.palette.background.default\r\n                    }}\r\n                >\r\n                    <Toolbar>\r\n                        <CanvasHeader\r\n                            chatflow={chatflow}\r\n                            handleSaveFlow={handleSaveFlow}\r\n                            handleDeleteFlow={handleDeleteFlow}\r\n                            handleLoadFlow={handleLoadFlow}\r\n                        />\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Box sx={{ pt: '70px', height: '100vh', width: '100%' }}>\r\n                    <div className='reactflow-parent-wrapper'>\r\n                        <div className='reactflow-wrapper' ref={reactFlowWrapper}>\r\n                            <ReactFlow\r\n                                nodes={nodes}\r\n                                edges={edges}\r\n                                onNodesChange={onNodesChange}\r\n                                onNodeClick={onNodeClick}\r\n                                onEdgesChange={onEdgesChange}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onNodeDragStop={setDirty}\r\n                                nodeTypes={nodeTypes}\r\n                                edgeTypes={edgeTypes}\r\n                                onConnect={onConnect}\r\n                                onInit={setReactFlowInstance}\r\n                                fitView\r\n                                deleteKeyCode={canvas.canvasDialogShow ? null : ['Backspace', 'Delete']}\r\n                                minZoom={0.1}\r\n                            >\r\n                                <Controls\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'row',\r\n                                        left: '50%',\r\n                                        transform: 'translate(-50%, -50%)'\r\n                                    }}\r\n                                />\r\n                                <Background color='#aaa' gap={16} />\r\n                                <AddNodes nodesData={getNodesApi.data} node={selectedNode} />\r\n                                {isUpsertButtonEnabled && <VectorStorePopUp chatflowid={chatflowId} />}\r\n                                <ChatPopUp chatflowid={chatflowId} />\r\n                            </ReactFlow>\r\n                        </div>\r\n                    </div>\r\n                </Box>\r\n                <ConfirmDialog />\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}