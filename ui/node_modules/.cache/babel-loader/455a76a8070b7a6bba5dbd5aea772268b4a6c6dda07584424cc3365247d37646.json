{"ast":null,"code":"import React from'react';import{useDispatch,useSelector}from'react-redux';import{useSnackbar}from'notistack';import{removeSnackbar}from'store/actions';let displayed=[];const useNotifier=()=>{const dispatch=useDispatch();const notifier=useSelector(state=>state.notifier);const{notifications}=notifier;const{enqueueSnackbar,closeSnackbar}=useSnackbar();const storeDisplayed=id=>{displayed=[...displayed,id];};const removeDisplayed=id=>{displayed=[...displayed.filter(key=>id!==key)];};React.useEffect(()=>{notifications.forEach(_ref=>{let{key,message,options={},dismissed=false}=_ref;if(dismissed){// dismiss snackbar using notistack\ncloseSnackbar(key);return;}// do nothing if snackbar is already displayed\nif(displayed.includes(key))return;// display snackbar using notistack\nenqueueSnackbar(message,{key,...options,onClose:(event,reason,myKey)=>{if(options.onClose){options.onClose(event,reason,myKey);}},onExited:(event,myKey)=>{// remove this snackbar from redux store\ndispatch(removeSnackbar(myKey));removeDisplayed(myKey);}});// keep track of snackbars that we've displayed\nstoreDisplayed(key);});},[notifications,closeSnackbar,enqueueSnackbar,dispatch]);};export default useNotifier;","map":{"version":3,"names":["React","useDispatch","useSelector","useSnackbar","removeSnackbar","displayed","useNotifier","dispatch","notifier","state","notifications","enqueueSnackbar","closeSnackbar","storeDisplayed","id","removeDisplayed","filter","key","useEffect","forEach","_ref","message","options","dismissed","includes","onClose","event","reason","myKey","onExited"],"sources":["D:/Flowise/packages/ui/src/utils/useNotifier.js"],"sourcesContent":["import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSnackbar } from 'notistack'\r\nimport { removeSnackbar } from 'store/actions'\r\n\r\nlet displayed = []\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch()\r\n    const notifier = useSelector((state) => state.notifier)\r\n    const { notifications } = notifier\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id]\r\n    }\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter((key) => id !== key)]\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key)\r\n                return\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey)\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey))\r\n                    removeDisplayed(myKey)\r\n                }\r\n            })\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key)\r\n        })\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch])\r\n}\r\n\r\nexport default useNotifier\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,WAAW,KAAQ,WAAW,CACvC,OAASC,cAAc,KAAQ,eAAe,CAE9C,GAAI,CAAAC,SAAS,CAAG,EAAE,CAElB,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACtB,KAAM,CAAAC,QAAQ,CAAGN,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAO,QAAQ,CAAGN,WAAW,CAAEO,KAAK,EAAKA,KAAK,CAACD,QAAQ,CAAC,CACvD,KAAM,CAAEE,aAAc,CAAC,CAAGF,QAAQ,CAElC,KAAM,CAAEG,eAAe,CAAEC,aAAc,CAAC,CAAGT,WAAW,CAAC,CAAC,CAExD,KAAM,CAAAU,cAAc,CAAIC,EAAE,EAAK,CAC3BT,SAAS,CAAG,CAAC,GAAGA,SAAS,CAAES,EAAE,CAAC,CAClC,CAAC,CAED,KAAM,CAAAC,eAAe,CAAID,EAAE,EAAK,CAC5BT,SAAS,CAAG,CAAC,GAAGA,SAAS,CAACW,MAAM,CAAEC,GAAG,EAAKH,EAAE,GAAKG,GAAG,CAAC,CAAC,CAC1D,CAAC,CAEDjB,KAAK,CAACkB,SAAS,CAAC,IAAM,CAClBR,aAAa,CAACS,OAAO,CAACC,IAAA,EAAuD,IAAtD,CAAEH,GAAG,CAAEI,OAAO,CAAEC,OAAO,CAAG,CAAC,CAAC,CAAEC,SAAS,CAAG,KAAM,CAAC,CAAAH,IAAA,CACpE,GAAIG,SAAS,CAAE,CACX;AACAX,aAAa,CAACK,GAAG,CAAC,CAClB,OACJ,CAEA;AACA,GAAIZ,SAAS,CAACmB,QAAQ,CAACP,GAAG,CAAC,CAAE,OAE7B;AACAN,eAAe,CAACU,OAAO,CAAE,CACrBJ,GAAG,CACH,GAAGK,OAAO,CACVG,OAAO,CAAEA,CAACC,KAAK,CAAEC,MAAM,CAAEC,KAAK,GAAK,CAC/B,GAAIN,OAAO,CAACG,OAAO,CAAE,CACjBH,OAAO,CAACG,OAAO,CAACC,KAAK,CAAEC,MAAM,CAAEC,KAAK,CAAC,CACzC,CACJ,CAAC,CACDC,QAAQ,CAAEA,CAACH,KAAK,CAAEE,KAAK,GAAK,CACxB;AACArB,QAAQ,CAACH,cAAc,CAACwB,KAAK,CAAC,CAAC,CAC/Bb,eAAe,CAACa,KAAK,CAAC,CAC1B,CACJ,CAAC,CAAC,CAEF;AACAf,cAAc,CAACI,GAAG,CAAC,CACvB,CAAC,CAAC,CACN,CAAC,CAAE,CAACP,aAAa,CAAEE,aAAa,CAAED,eAAe,CAAEJ,QAAQ,CAAC,CAAC,CACjE,CAAC,CAED,cAAe,CAAAD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}