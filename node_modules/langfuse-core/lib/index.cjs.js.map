{"version":3,"file":"index.cjs.js","sources":["../src/types.ts","../src/utils.ts","../src/eventemitter.ts","../src/release-env.ts","../src/storage-memory.ts","../src/index.ts"],"sourcesContent":["import { type LangfusePromptClient } from \".\";\nimport { type components, type paths } from \"./openapi/server\";\n\nexport type LangfuseCoreOptions = {\n  // Langfuse API baseUrl (https://cloud.langfuse.com by default)\n  baseUrl?: string;\n  // The number of events to queue before sending to Langfuse (flushing)\n  flushAt?: number;\n  // The interval in milliseconds between periodic flushes\n  flushInterval?: number;\n  // How many times we will retry HTTP requests\n  fetchRetryCount?: number;\n  // The delay between HTTP request retries\n  fetchRetryDelay?: number;\n  // Timeout in milliseconds for any calls. Defaults to 10 seconds.\n  requestTimeout?: number;\n  // release (version) of the application, defaults to env LANGFUSE_RELEASE\n  release?: string;\n  // integration type of the SDK.\n  sdkIntegration?: \"DEFAULT\" | \"LANGCHAIN\" | string;\n};\n\nexport enum LangfusePersistedProperty {\n  Props = \"props\",\n  Queue = \"queue\",\n  OptedOut = \"opted_out\",\n}\n\nexport type LangfuseFetchOptions = {\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\";\n  headers: { [key: string]: string };\n  body?: string;\n  signal?: AbortSignal;\n};\n\nexport type LangfuseFetchResponse<T = any> = {\n  status: number;\n  text: () => Promise<string>;\n  json: () => Promise<T>;\n};\n\nexport type LangfuseObject = SingleIngestionEvent[\"type\"];\n\nexport type LangfuseQueueItem = SingleIngestionEvent & {\n  callback?: (err: any) => void;\n};\n\nexport type SingleIngestionEvent =\n  paths[\"/api/public/ingestion\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"][\"batch\"][number];\n\n// return type of ingestion endpoint defined on 200 status error in fern as 207 is not possible\nexport type IngestionReturnType =\n  paths[\"/api/public/ingestion\"][\"post\"][\"responses\"][200][\"content\"][\"application/json\"];\n\nexport type LangfuseEventProperties = {\n  [key: string]: any;\n};\n\nexport type LangfuseMetadataProperties = {\n  [key: string]: any;\n};\n\n// ASYNC\nexport type CreateLangfuseTraceBody = FixTypes<components[\"schemas\"][\"TraceBody\"]>;\n\nexport type CreateLangfuseEventBody = FixTypes<components[\"schemas\"][\"CreateEventBody\"]>;\n\nexport type CreateLangfuseSpanBody = FixTypes<components[\"schemas\"][\"CreateSpanBody\"]>;\nexport type UpdateLangfuseSpanBody = FixTypes<components[\"schemas\"][\"UpdateSpanBody\"]>;\n\nexport type Usage = FixTypes<components[\"schemas\"][\"IngestionUsage\"]>;\nexport type CreateLangfuseGenerationBody = FixTypes<components[\"schemas\"][\"CreateGenerationBody\"]>;\nexport type UpdateLangfuseGenerationBody = FixTypes<components[\"schemas\"][\"UpdateGenerationBody\"]>;\n\nexport type CreateLangfuseScoreBody = FixTypes<components[\"schemas\"][\"ScoreBody\"]>;\n\n// SYNC\nexport type GetLangfuseDatasetParams = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}\"][\"get\"][\"parameters\"][\"path\"]\n>;\nexport type GetLangfuseDatasetResponse = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetRunItemBody = FixTypes<\n  paths[\"/api/public/dataset-run-items\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetRunItemResponse = FixTypes<\n  paths[\"/api/public/dataset-run-items\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetBody =\n  paths[\"/api/public/datasets\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"];\nexport type CreateLangfuseDatasetResponse = FixTypes<\n  paths[\"/api/public/datasets\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetItemBody = FixTypes<\n  paths[\"/api/public/dataset-items\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetItemResponse = FixTypes<\n  paths[\"/api/public/dataset-items\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseDatasetRunParams = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}/runs/{runName}\"][\"get\"][\"parameters\"][\"path\"]\n>;\nexport type GetLangfuseDatasetRunResponse = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}/runs/{runName}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfusePromptBody = FixTypes<\n  paths[\"/api/public/prompts\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfusePromptResponse = FixTypes<\n  paths[\"/api/public/prompts\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfusePromptSuccessData = FixTypes<\n  paths[\"/api/public/prompts\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfusePromptFailureData = { message?: string };\nexport type GetLangfusePromptResponse =\n  | {\n      fetchResult: \"success\";\n      data: GetLangfusePromptSuccessData;\n    }\n  | { fetchResult: \"failure\"; data: GetLangfusePromptFailureData };\n\nexport type PromptInput = {\n  prompt?: LangfusePromptClient;\n};\n\nexport type JsonType = string | number | boolean | null | { [key: string]: JsonType } | Array<JsonType>;\n\ntype OptionalTypes<T> = T extends null | undefined ? T : never;\ntype FixTypes<T> = Omit<\n  {\n    [P in keyof T]: P extends \"startTime\" | \"endTime\" | \"timestamp\" | \"completionStartTime\" | \"createdAt\" | \"updatedAt\"\n      ? // Dates instead of strings\n        Date | OptionalTypes<T[P]>\n      : P extends \"metadata\" | \"input\" | \"output\" | \"prompt\" | \"completion\" | \"expectedOutput\"\n        ? // JSON instead of strings\n          any | OptionalTypes<T[P]>\n        : T[P];\n  },\n  \"externalId\" | \"traceIdType\"\n>;\n\nexport type DeferRuntime = {\n  langfuseTraces: (\n    traces: {\n      id: string;\n      name: string;\n      url: string;\n    }[]\n  ) => void;\n};\n","import { type LangfuseCoreOptions } from \"./types\";\n\nexport function assert(truthyValue: any, message: string): void {\n  if (!truthyValue) {\n    throw new Error(message);\n  }\n}\n\nexport function removeTrailingSlash(url: string): string {\n  return url?.replace(/\\/+$/, \"\");\n}\n\nexport interface RetriableOptions {\n  retryCount?: number;\n  retryDelay?: number;\n  retryCheck?: (err: any) => boolean;\n}\n\nexport async function retriable<T>(\n  fn: () => Promise<T>,\n  props: RetriableOptions = {},\n  log: (msg: string) => void\n): Promise<T> {\n  const { retryCount = 3, retryDelay = 5000, retryCheck = () => true } = props;\n  let lastError = null;\n\n  for (let i = 0; i < retryCount + 1; i++) {\n    if (i > 0) {\n      // don't wait when it's the first try\n      await new Promise((resolve) => setTimeout(resolve, retryDelay));\n      log(`Retrying ${i + 1} of ${retryCount + 1}`);\n    }\n\n    try {\n      const res = await fn();\n      return res;\n    } catch (e) {\n      lastError = e;\n      if (!retryCheck(e)) {\n        throw e;\n      }\n      log(`Retriable error: ${JSON.stringify(e)}`);\n    }\n  }\n\n  throw lastError;\n}\n\n// https://stackoverflow.com/a/8809472\nexport function generateUUID(globalThis?: any): string {\n  // Public Domain/MIT\n  let d = new Date().getTime(); //Timestamp\n  let d2 =\n    (globalThis && globalThis.performance && globalThis.performance.now && globalThis.performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\nexport function currentTimestamp(): number {\n  return new Date().getTime();\n}\n\nexport function currentISOTime(): string {\n  return new Date().toISOString();\n}\n\nexport function safeSetTimeout(fn: () => void, timeout: number): any {\n  // NOTE: we use this so rarely that it is totally fine to do `safeSetTimeout(fn, 0)``\n  // rather than setImmediate.\n  const t = setTimeout(fn, timeout) as any;\n  // We unref if available to prevent Node.js hanging on exit\n  t?.unref && t?.unref();\n  return t;\n}\n\nexport function getEnv<T = string>(key: string): T | undefined {\n  if (typeof process !== \"undefined\" && process.env[key]) {\n    return process.env[key] as T;\n  } else if (typeof globalThis !== \"undefined\") {\n    return (globalThis as any)[key];\n  }\n  return;\n}\n\ntype Params = LangfuseCoreOptions & {\n  publicKey?: string;\n  secretKey?: string;\n};\n\nexport function configLangfuseSDK(params?: Params, secretRequired: boolean = true): Params {\n  if (!params) {\n    params = {};\n  }\n\n  const { publicKey, secretKey, ...coreOptions } = params;\n\n  // check environment variables if values not provided\n  const finalPublicKey = publicKey ?? getEnv(\"LANGFUSE_PUBLIC_KEY\");\n  const finalSecretKey = secretRequired ? secretKey ?? getEnv(\"LANGFUSE_SECRET_KEY\") : undefined;\n  const finalBaseUrl = coreOptions.baseUrl ?? getEnv(\"LANGFUSE_BASEURL\");\n\n  const finalCoreOptions = {\n    ...coreOptions,\n    baseUrl: finalBaseUrl,\n  };\n\n  // check required parameters\n  if (!finalPublicKey) {\n    console.error(\n      \"publicKey is required, but was not provided. It can be provided as an argument or as an environment variable LANGFUSE_PUBLIC_KEY.\"\n    );\n  }\n\n  if (!finalSecretKey && secretRequired) {\n    console.error(\n      \"secretKey is required, but was not provided. It can be provided as an argument or as an environment variable LANGFUSE_SECRET_KEY.\"\n    );\n  }\n\n  return {\n    publicKey: finalPublicKey,\n    ...(secretRequired ? { secretKey: finalSecretKey } : undefined),\n    ...finalCoreOptions,\n  };\n}\n","export class SimpleEventEmitter {\n  events: { [key: string]: ((...args: any[]) => void)[] } = {};\n\n  constructor() {\n    this.events = {};\n  }\n\n  on(event: string, listener: (...args: any[]) => void): () => void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n\n    return () => {\n      this.events[event] = this.events[event].filter((x) => x !== listener);\n    };\n  }\n\n  emit(event: string, payload: any): void {\n    for (const listener of this.events[event] || []) {\n      listener(payload);\n    }\n    for (const listener of this.events[\"*\"] || []) {\n      listener(event, payload);\n    }\n  }\n}\n","import { getEnv } from \"./utils\";\n\nconst common_release_envs = [\n  // Vercel\n  \"VERCEL_GIT_COMMIT_SHA\",\n  \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\",\n  // Netlify\n  \"COMMIT_REF\",\n  // Render\n  \"RENDER_GIT_COMMIT\",\n  // GitLab CI\n  \"CI_COMMIT_SHA\",\n  // CicleCI\n  \"CIRCLE_SHA1\",\n  // Cloudflare pages\n  \"CF_PAGES_COMMIT_SHA\",\n  // AWS Amplify\n  \"REACT_APP_GIT_SHA\",\n  // Heroku\n  \"SOURCE_VERSION\",\n] as const;\n\nexport function getCommonReleaseEnvs(): string | undefined {\n  for (const key of common_release_envs) {\n    const value = getEnv(key);\n    if (value) {\n      return value;\n    }\n  }\n  return undefined;\n}\n","import { type LangfusePersistedProperty } from \"./types\";\n\nexport class LangfuseMemoryStorage {\n  private _memoryStorage: { [key: string]: any | undefined } = {};\n\n  getProperty(key: LangfusePersistedProperty): any | undefined {\n    return this._memoryStorage[key];\n  }\n\n  setProperty(key: LangfusePersistedProperty, value: any | null): void {\n    this._memoryStorage[key] = value !== null ? value : undefined;\n  }\n}\n","import {\n  type LangfuseFetchOptions,\n  type LangfuseFetchResponse,\n  type LangfuseQueueItem,\n  type LangfuseCoreOptions,\n  LangfusePersistedProperty,\n  type CreateLangfuseTraceBody,\n  type LangfuseObject,\n  type CreateLangfuseEventBody,\n  type CreateLangfuseSpanBody,\n  type CreateLangfuseGenerationBody,\n  type CreateLangfuseScoreBody,\n  type UpdateLangfuseSpanBody,\n  type UpdateLangfuseGenerationBody,\n  type GetLangfuseDatasetParams,\n  type GetLangfuseDatasetResponse,\n  type CreateLangfuseDatasetRunItemBody,\n  type CreateLangfuseDatasetRunItemResponse,\n  type CreateLangfuseDatasetBody,\n  type CreateLangfuseDatasetResponse,\n  type CreateLangfuseDatasetItemBody,\n  type CreateLangfuseDatasetItemResponse,\n  type GetLangfuseDatasetRunResponse,\n  type GetLangfuseDatasetRunParams,\n  type DeferRuntime,\n  type IngestionReturnType,\n  type SingleIngestionEvent,\n  type CreateLangfusePromptResponse,\n  type CreateLangfusePromptBody,\n  type GetLangfusePromptResponse,\n  type PromptInput,\n} from \"./types\";\nimport {\n  assert,\n  generateUUID,\n  removeTrailingSlash,\n  retriable,\n  type RetriableOptions,\n  safeSetTimeout,\n  getEnv,\n  currentISOTime,\n} from \"./utils\";\nimport mustache from \"mustache\";\n\nexport * as utils from \"./utils\";\nimport { SimpleEventEmitter } from \"./eventemitter\";\nimport { getCommonReleaseEnvs } from \"./release-env\";\nexport { LangfuseMemoryStorage } from \"./storage-memory\";\n\nexport type IngestionBody = SingleIngestionEvent[\"body\"];\n\nexport const DEFAULT_PROMPT_CACHE_TTL_SECONDS = 60;\n\nclass LangfuseFetchHttpError extends Error {\n  name = \"LangfuseFetchHttpError\";\n  body: string | undefined;\n\n  constructor(\n    public response: LangfuseFetchResponse,\n    body: string\n  ) {\n    super(\"HTTP error while fetching Langfuse: \" + response.status + \" and body: \" + body);\n  }\n}\n\nclass LangfuseFetchNetworkError extends Error {\n  name = \"LangfuseFetchNetworkError\";\n\n  constructor(public error: unknown) {\n    super(\"Network error while fetching Langfuse\", error instanceof Error ? { cause: error } : {});\n  }\n}\n\nfunction isLangfuseFetchError(err: any): boolean {\n  return typeof err === \"object\" && (err.name === \"LangfuseFetchHttpError\" || err.name === \"LangfuseFetchNetworkError\");\n}\n\nabstract class LangfuseCoreStateless {\n  // options\n  private secretKey: string | undefined;\n  private publicKey: string;\n  baseUrl: string;\n  private flushAt: number;\n  private flushInterval: number;\n  private requestTimeout: number;\n  private removeDebugCallback?: () => void;\n  private debugMode: boolean = false;\n  private pendingPromises: Record<string, Promise<any>> = {};\n  private release: string | undefined;\n  private sdkIntegration: \"DEFAULT\" | \"LANGCHAIN\" | string;\n\n  // internal\n  protected _events = new SimpleEventEmitter();\n  protected _flushTimer?: any;\n  protected _retryOptions: RetriableOptions;\n\n  // Abstract methods to be overridden by implementations\n  abstract fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse>;\n  abstract getLibraryId(): string;\n  abstract getLibraryVersion(): string;\n\n  // This is our abstracted storage. Each implementation should handle its own\n  abstract getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined;\n  abstract setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void;\n\n  constructor(params: { publicKey: string; secretKey?: string } & LangfuseCoreOptions) {\n    const { publicKey, secretKey, ...options } = params;\n    assert(publicKey, \"You must pass your Langfuse project's api public key.\");\n\n    this.publicKey = publicKey;\n    this.secretKey = secretKey;\n    this.baseUrl = removeTrailingSlash(options?.baseUrl || \"https://cloud.langfuse.com\");\n    this.flushAt = options?.flushAt ? Math.max(options?.flushAt, 1) : 20;\n    this.flushInterval = options?.flushInterval ?? 10000;\n    this.release = options?.release ?? getEnv(\"LANGFUSE_RELEASE\") ?? getCommonReleaseEnvs() ?? undefined;\n\n    this._retryOptions = {\n      retryCount: options?.fetchRetryCount ?? 3,\n      retryDelay: options?.fetchRetryDelay ?? 3000,\n      retryCheck: isLangfuseFetchError,\n    };\n    this.requestTimeout = options?.requestTimeout ?? 10000; // 10 seconds\n\n    this.sdkIntegration = options?.sdkIntegration ?? (\"DEFAULT\" as const);\n  }\n\n  protected getCommonEventProperties(): any {\n    return {\n      $lib: this.getLibraryId(),\n      $lib_version: this.getLibraryVersion(),\n    };\n  }\n\n  on(event: string, cb: (...args: any[]) => void): () => void {\n    return this._events.on(event, cb);\n  }\n\n  debug(enabled: boolean = true): void {\n    this.removeDebugCallback?.();\n\n    this.debugMode = enabled;\n\n    if (enabled) {\n      this.removeDebugCallback = this.on(\"*\", (event, payload) =>\n        console.log(\"Langfuse Debug\", event, JSON.stringify(payload))\n      );\n    }\n  }\n\n  /***\n   *** Handlers for each object type\n   ***/\n  protected traceStateless(body: CreateLangfuseTraceBody): string {\n    const { id: bodyId, release: bodyRelease, ...rest } = body;\n\n    const id = bodyId ?? generateUUID();\n    const release = bodyRelease ?? this.release;\n\n    const parsedBody: CreateLangfuseTraceBody = {\n      id,\n      release,\n      ...rest,\n    };\n    this.enqueue(\"trace-create\", parsedBody);\n    return id;\n  }\n\n  protected eventStateless(body: CreateLangfuseEventBody): string {\n    const { id: bodyId, startTime: bodyStartTime, ...rest } = body;\n\n    const id = bodyId ?? generateUUID();\n\n    const parsedBody: CreateLangfuseEventBody = {\n      id,\n      startTime: bodyStartTime ?? new Date(),\n      ...rest,\n    };\n    this.enqueue(\"event-create\", parsedBody);\n    return id;\n  }\n\n  protected spanStateless(body: CreateLangfuseSpanBody): string {\n    const { id: bodyId, startTime: bodyStartTime, ...rest } = body;\n\n    const id = bodyId || generateUUID();\n\n    const parsedBody: CreateLangfuseSpanBody = {\n      id,\n      startTime: bodyStartTime ?? new Date(),\n      ...rest,\n    };\n    this.enqueue(\"span-create\", parsedBody);\n    return id;\n  }\n\n  protected generationStateless(\n    body: Omit<CreateLangfuseGenerationBody, \"promptName\" | \"promptVersion\"> & PromptInput\n  ): string {\n    const { id: bodyId, startTime: bodyStartTime, prompt, ...rest } = body;\n\n    const id = bodyId || generateUUID();\n\n    const parsedBody: CreateLangfuseGenerationBody = {\n      id,\n      startTime: bodyStartTime ?? new Date(),\n      ...(prompt ? { promptName: prompt.name, promptVersion: prompt.version } : {}),\n      ...rest,\n    };\n\n    this.enqueue(\"generation-create\", parsedBody);\n    return id;\n  }\n\n  protected scoreStateless(body: CreateLangfuseScoreBody): string {\n    const { id: bodyId, ...rest } = body;\n\n    const id = bodyId || generateUUID();\n\n    const parsedBody: CreateLangfuseScoreBody = {\n      id,\n      ...rest,\n    };\n    this.enqueue(\"score-create\", parsedBody);\n    return id;\n  }\n\n  protected updateSpanStateless(body: UpdateLangfuseSpanBody): string {\n    this.enqueue(\"span-update\", body);\n    return body.id;\n  }\n\n  protected updateGenerationStateless(\n    body: Omit<UpdateLangfuseGenerationBody, \"promptName\" | \"promptVersion\"> & PromptInput\n  ): string {\n    const { prompt, ...rest } = body;\n    const parsedBody: UpdateLangfuseGenerationBody = {\n      ...(prompt ? { promptName: prompt.name, promptVersion: prompt.version } : {}),\n      ...rest,\n    };\n    this.enqueue(\"generation-update\", parsedBody);\n    return body.id;\n  }\n\n  protected async _getDataset(name: GetLangfuseDatasetParams[\"datasetName\"]): Promise<GetLangfuseDatasetResponse> {\n    return this.fetch(`${this.baseUrl}/api/public/datasets/${name}`, this._getFetchOptions({ method: \"GET\" })).then(\n      (res) => res.json()\n    );\n  }\n\n  async getDatasetRun(params: GetLangfuseDatasetRunParams): Promise<GetLangfuseDatasetRunResponse> {\n    return this.fetch(\n      `${this.baseUrl}/api/public/datasets/${params.datasetName}/runs/${params.runName}`,\n      this._getFetchOptions({ method: \"GET\" })\n    ).then((res) => res.json());\n  }\n\n  async createDatasetRunItem(body: CreateLangfuseDatasetRunItemBody): Promise<CreateLangfuseDatasetRunItemResponse> {\n    return this.fetch(\n      `${this.baseUrl}/api/public/dataset-run-items`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    ).then((res) => res.json());\n  }\n\n  async createDataset(name: string): Promise<CreateLangfuseDatasetResponse> {\n    const body: CreateLangfuseDatasetBody = { name };\n    return this.fetch(\n      `${this.baseUrl}/api/public/datasets`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    ).then((res) => res.json());\n  }\n\n  /**\n   * Creates a dataset item. Upserts the item if it already exists.\n   * @param body The body of the dataset item to be created.\n   * @returns A promise that resolves to the response of the create operation.\n   */\n  async createDatasetItem(body: CreateLangfuseDatasetItemBody): Promise<CreateLangfuseDatasetItemResponse> {\n    return this.fetch(\n      `${this.baseUrl}/api/public/dataset-items`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    ).then((res) => res.json());\n  }\n\n  async getDatasetItem(id: string): Promise<CreateLangfuseDatasetItemResponse> {\n    return this.fetch(`${this.baseUrl}/api/public/dataset-items/${id}`, this._getFetchOptions({ method: \"GET\" })).then(\n      (res) => res.json()\n    );\n  }\n\n  protected _parsePayload(response: any): any {\n    try {\n      return JSON.parse(response);\n    } catch {\n      return response;\n    }\n  }\n\n  async createPromptStateless(body: CreateLangfusePromptBody): Promise<CreateLangfusePromptResponse> {\n    return this.fetch(\n      `${this.baseUrl}/api/public/prompts`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    ).then((res) => res.json());\n  }\n\n  async getPromptStateless(name: string, version?: number): Promise<GetLangfusePromptResponse> {\n    const url = `${this.baseUrl}/api/public/prompts?name=${name}` + (version ? `&version=${version}` : \"\");\n    return this.fetch(url, this._getFetchOptions({ method: \"GET\" })).then(async (res) => {\n      const data = await res.json();\n\n      return { fetchResult: res.status === 200 ? \"success\" : \"failure\", data };\n    });\n  }\n\n  /***\n   *** QUEUEING AND FLUSHING\n   ***/\n  protected enqueue(type: LangfuseObject, body: any): void {\n    try {\n      const queue = this.getPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue) || [];\n\n      queue.push({\n        id: generateUUID(),\n        type,\n        timestamp: currentISOTime(),\n        body,\n        metadata: undefined,\n      });\n      this.setPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue, queue);\n\n      this._events.emit(type, body);\n\n      // Flush queued events if we meet the flushAt length\n      if (queue.length >= this.flushAt) {\n        this.flush();\n      }\n\n      if (this.flushInterval && !this._flushTimer) {\n        this._flushTimer = safeSetTimeout(() => this.flush(), this.flushInterval);\n      }\n    } catch (e) {\n      this._events.emit(\"error\", e);\n    }\n  }\n\n  /**\n   * Asynchronously flushes all events that are not yet sent to the server.\n   * This function always resolves, even if there were errors when flushing.\n   * Errors are emitted as \"error\" events and the promise resolves.\n   *\n   * @returns {Promise<void>} A promise that resolves when the flushing is completed.\n   */\n  flushAsync(): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      try {\n        this.flush((err, data) => {\n          if (err) {\n            console.error(\"Error while flushing Langfuse\", err);\n            resolve();\n          } else {\n            resolve(data);\n          }\n        });\n      } catch (e) {\n        console.error(\"Error while flushing Langfuse\", e);\n      }\n    });\n  }\n\n  // Flushes all events that are not yet sent to the server\n  flush(callback?: (err?: any, data?: any) => void): void {\n    if (this._flushTimer) {\n      clearTimeout(this._flushTimer);\n      this._flushTimer = null;\n    }\n\n    const queue = this.getPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue) || [];\n\n    if (!queue.length) {\n      return callback?.();\n    }\n\n    const items = queue.splice(0, this.flushAt);\n    this.setPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue, queue);\n\n    const MAX_MSG_SIZE = 1_000_000;\n    const BATCH_SIZE_LIMIT = 2_500_000;\n\n    this.processQueueItems(items, MAX_MSG_SIZE, BATCH_SIZE_LIMIT);\n\n    const promiseUUID = generateUUID();\n\n    const done = (err?: any): void => {\n      if (err) {\n        this._events.emit(\"error\", err);\n      }\n      callback?.(err, items);\n      this._events.emit(\"flush\", items);\n    };\n\n    const payload = JSON.stringify({\n      batch: items,\n      metadata: {\n        batch_size: items.length,\n        sdk_integration: this.sdkIntegration,\n        sdk_version: this.getLibraryVersion(),\n        sdk_variant: this.getLibraryId(),\n        public_key: this.publicKey,\n        sdk_name: \"langfuse-js\",\n      },\n    }); // implicit conversion also of dates to strings\n\n    const url = `${this.baseUrl}/api/public/ingestion`;\n\n    const fetchOptions = this._getFetchOptions({\n      method: \"POST\",\n      body: payload,\n    });\n\n    const requestPromise = this.fetchWithRetry(url, fetchOptions)\n      .then(() => done())\n      .catch((err) => {\n        done(err);\n      });\n    this.pendingPromises[promiseUUID] = requestPromise;\n    requestPromise.finally(() => {\n      delete this.pendingPromises[promiseUUID];\n    });\n  }\n\n  public processQueueItems(\n    queue: LangfuseQueueItem[],\n    MAX_MSG_SIZE: number,\n    BATCH_SIZE_LIMIT: number\n  ): { processedItems: LangfuseQueueItem[]; remainingItems: LangfuseQueueItem[] } {\n    let totalSize = 0;\n    const processedItems: LangfuseQueueItem[] = [];\n    const remainingItems: LangfuseQueueItem[] = [];\n\n    for (let i = 0; i < queue.length; i++) {\n      try {\n        const itemSize = new Blob([JSON.stringify(queue[i])]).size;\n\n        // discard item if it exceeds the maximum size per event\n        if (itemSize > MAX_MSG_SIZE) {\n          console.warn(`Item exceeds size limit (size: ${itemSize}), dropping item.`);\n          continue;\n        }\n\n        // if adding the next item would exceed the batch size limit, stop processing\n        if (totalSize + itemSize >= BATCH_SIZE_LIMIT) {\n          console.debug(`hit batch size limit (size: ${totalSize + itemSize})`);\n          remainingItems.push(...queue.slice(i));\n          console.log(`Remaining items: ${remainingItems.length}`);\n          console.log(`processes items: ${processedItems.length}`);\n          break;\n        }\n\n        // only add the item if it passes both requirements\n        totalSize += itemSize;\n        processedItems.push(queue[i]);\n      } catch (error) {\n        console.error(error);\n        remainingItems.push(...queue.slice(i));\n        break;\n      }\n    }\n\n    return { processedItems, remainingItems };\n  }\n\n  _getFetchOptions(p: {\n    method: LangfuseFetchOptions[\"method\"];\n    body?: LangfuseFetchOptions[\"body\"];\n  }): LangfuseFetchOptions {\n    const fetchOptions: LangfuseFetchOptions = {\n      method: p.method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Langfuse-Sdk-Name\": \"langfuse-js\",\n        \"X-Langfuse-Sdk-Version\": this.getLibraryVersion(),\n        \"X-Langfuse-Sdk-Variant\": this.getLibraryId(),\n        \"X-Langfuse-Public-Key\": this.publicKey,\n        ...this.constructAuthorizationHeader(this.publicKey, this.secretKey),\n      },\n      body: p.body,\n    };\n\n    return fetchOptions;\n  }\n\n  private constructAuthorizationHeader(\n    publicKey: string,\n    secretKey?: string\n  ): {\n    Authorization: string;\n  } {\n    if (secretKey === undefined) {\n      return { Authorization: \"Bearer \" + publicKey };\n    } else {\n      const encodedCredentials =\n        typeof btoa === \"function\"\n          ? // btoa() is available, the code is running in a browser or edge environment\n            btoa(publicKey + \":\" + secretKey)\n          : // btoa() is not available, the code is running in Node.js\n            Buffer.from(publicKey + \":\" + secretKey).toString(\"base64\");\n\n      return { Authorization: \"Basic \" + encodedCredentials };\n    }\n  }\n\n  private async fetchWithRetry(\n    url: string,\n    options: LangfuseFetchOptions,\n    retryOptions?: RetriableOptions\n  ): Promise<LangfuseFetchResponse> {\n    (AbortSignal as any).timeout ??= function timeout(ms: number) {\n      const ctrl = new AbortController();\n      setTimeout(() => ctrl.abort(), ms);\n      return ctrl.signal;\n    };\n\n    return await retriable(\n      async () => {\n        let res: LangfuseFetchResponse<IngestionReturnType> | null = null;\n        try {\n          res = await this.fetch(url, {\n            signal: (AbortSignal as any).timeout(this.requestTimeout),\n            ...options,\n          });\n        } catch (e) {\n          // fetch will only throw on network errors or on timeouts\n          throw new LangfuseFetchNetworkError(e);\n        }\n\n        if (res.status < 200 || res.status >= 400) {\n          const body = await res.json();\n          throw new LangfuseFetchHttpError(res, JSON.stringify(body));\n        }\n        const returnBody = await res.json();\n        if (res.status === 207 && returnBody.errors.length > 0) {\n          throw new LangfuseFetchHttpError(res, JSON.stringify(returnBody.errors));\n        }\n\n        return res;\n      },\n      { ...this._retryOptions, ...retryOptions },\n      (string) => this._events.emit(\"retry\", string + \", \" + url + \", \" + JSON.stringify(options))\n    );\n  }\n\n  async shutdownAsync(): Promise<void> {\n    clearTimeout(this._flushTimer);\n    try {\n      await this.flushAsync();\n      await Promise.all(\n        Object.values(this.pendingPromises).map((x) =>\n          x.catch(() => {\n            // ignore errors as we are shutting down and can't deal with them anyways.\n          })\n        )\n      );\n      // flush again in case there are new events that were added while we were waiting for the pending promises to resolve\n      await this.flushAsync();\n    } catch (e) {\n      console.error(\"Error while shutting down Langfuse\", e);\n    }\n  }\n\n  shutdown(): void {\n    console.warn(\n      \"shutdown() is deprecated. It does not wait for all events to be processed. Please use shutdownAsync() instead.\"\n    );\n    void this.shutdownAsync();\n  }\n\n  protected async awaitAllQueuedAndPendingRequests(): Promise<void> {\n    clearTimeout(this._flushTimer);\n    await this.flushAsync();\n    await Promise.all(Object.values(this.pendingPromises));\n  }\n}\n\nexport abstract class LangfuseWebStateless extends LangfuseCoreStateless {\n  constructor(params: { publicKey: string } & LangfuseCoreOptions) {\n    const { flushAt, flushInterval, ...rest } = params;\n    super({\n      ...rest,\n      flushAt: flushAt ?? 1,\n      flushInterval: flushInterval ?? 0,\n    });\n  }\n\n  async score(body: CreateLangfuseScoreBody): Promise<this> {\n    this.scoreStateless(body);\n    await this.awaitAllQueuedAndPendingRequests();\n    return this;\n  }\n}\n\nexport abstract class LangfuseCore extends LangfuseCoreStateless {\n  private _promptCache: LangfusePromptCache;\n\n  constructor(params: { publicKey: string; secretKey: string } & LangfuseCoreOptions) {\n    assert(params.publicKey, \"You must pass your Langfuse project's api public key.\");\n    assert(params.secretKey, \"You must pass your Langfuse project's api secret key.\");\n    super(params);\n    this._promptCache = new LangfusePromptCache();\n  }\n\n  trace(body?: CreateLangfuseTraceBody): LangfuseTraceClient {\n    const id = this.traceStateless(body ?? {});\n    const t = new LangfuseTraceClient(this, id);\n    if (getEnv(\"DEFER\") && body) {\n      try {\n        const deferRuntime = getEnv<DeferRuntime>(\"__deferRuntime\");\n        if (deferRuntime) {\n          deferRuntime.langfuseTraces([\n            {\n              id: id,\n              name: body.name || \"\",\n              url: t.getTraceUrl(),\n            },\n          ]);\n        }\n      } catch {}\n    }\n    return t;\n  }\n\n  span(body: CreateLangfuseSpanBody): LangfuseSpanClient {\n    const traceId = body.traceId || this.traceStateless({ name: body.name });\n    const id = this.spanStateless({ ...body, traceId });\n    return new LangfuseSpanClient(this, id, traceId);\n  }\n\n  generation(\n    body: Omit<CreateLangfuseGenerationBody, \"promptName\" | \"promptVersion\"> & PromptInput\n  ): LangfuseGenerationClient {\n    const traceId = body.traceId || this.traceStateless({ name: body.name });\n    const id = this.generationStateless({ ...body, traceId });\n    return new LangfuseGenerationClient(this, id, traceId);\n  }\n\n  event(body: CreateLangfuseEventBody): LangfuseEventClient {\n    const traceId = body.traceId || this.traceStateless({ name: body.name });\n    const id = this.eventStateless({ ...body, traceId });\n    return new LangfuseEventClient(this, id, traceId);\n  }\n\n  score(body: CreateLangfuseScoreBody): this {\n    this.scoreStateless(body);\n    return this;\n  }\n\n  async getDataset(name: string): Promise<{\n    id: string;\n    name: string;\n    projectId: string;\n    items: Array<{\n      id: string;\n      input: any;\n      expectedOutput?: any;\n      sourceObservationId?: string | null;\n      link: (obj: LangfuseObservationClient, runName: string) => Promise<{ id: string }>;\n    }>;\n  }> {\n    const { items, ...dataset } = await this._getDataset(name);\n\n    const returnDataset = {\n      ...dataset,\n      items: items.map((item) => ({\n        ...item,\n        link: async (obj: LangfuseObservationClient, runName: string) => {\n          await this.awaitAllQueuedAndPendingRequests();\n          const data = await this.createDatasetRunItem({\n            runName,\n            datasetItemId: item.id,\n            observationId: obj.id,\n          });\n          return data;\n        },\n      })),\n    };\n\n    return returnDataset;\n  }\n\n  async createPrompt(body: CreateLangfusePromptBody): Promise<LangfusePromptClient> {\n    const prompt = await this.createPromptStateless(body);\n    return new LangfusePromptClient(prompt);\n  }\n\n  async getPrompt(\n    name: string,\n    version?: number,\n    options?: { cacheTtlSeconds?: number }\n  ): Promise<LangfusePromptClient> {\n    const cacheKey = this._getPromptCacheKey(name, version);\n    const cachedPrompt = this._promptCache.getIncludingExpired(cacheKey);\n\n    if (!cachedPrompt) {\n      return await this._fetchPromptAndUpdateCache(name, version, options?.cacheTtlSeconds);\n    }\n\n    if (cachedPrompt.isExpired) {\n      return await this._fetchPromptAndUpdateCache(name, version, options?.cacheTtlSeconds).catch(() => {\n        console.warn(`Returning expired prompt cache for '${name}-${version ?? \"latest\"}' due to fetch error`);\n\n        return cachedPrompt.value;\n      });\n    }\n\n    return cachedPrompt.value;\n  }\n\n  private _getPromptCacheKey(name: string, version?: number): string {\n    return `${name}-${version ?? \"latest\"}`;\n  }\n\n  private async _fetchPromptAndUpdateCache(\n    name: string,\n    version?: number,\n    cacheTtlSeconds?: number\n  ): Promise<LangfusePromptClient> {\n    try {\n      const { data, fetchResult } = await this.getPromptStateless(name, version);\n      if (fetchResult === \"failure\") {\n        throw Error(data.message ?? \"Internal error while fetching prompt\");\n      }\n\n      const prompt = new LangfusePromptClient(data);\n      this._promptCache.set(this._getPromptCacheKey(name, version), prompt, cacheTtlSeconds);\n\n      return prompt;\n    } catch (error) {\n      console.error(`Error while fetching prompt '${name}-${version ?? \"latest\"}':`, error);\n\n      throw error;\n    }\n  }\n\n  _updateSpan(body: UpdateLangfuseSpanBody): this {\n    this.updateSpanStateless(body);\n    return this;\n  }\n\n  _updateGeneration(body: UpdateLangfuseGenerationBody): this {\n    this.updateGenerationStateless(body);\n    return this;\n  }\n}\n\nexport abstract class LangfuseObjectClient {\n  public readonly client: LangfuseCore;\n  public readonly id: string;\n  public readonly traceId: string;\n  public readonly observationId: string | null;\n\n  constructor({\n    client,\n    id,\n    traceId,\n    observationId,\n  }: {\n    client: LangfuseCore;\n    id: string;\n    traceId: string;\n    observationId: string | null;\n  }) {\n    this.client = client;\n    this.id = id;\n    this.traceId = traceId;\n    this.observationId = observationId;\n  }\n\n  event(body: Omit<CreateLangfuseEventBody, \"traceId\" | \"parentObservationId\">): LangfuseEventClient {\n    return this.client.event({\n      ...body,\n      traceId: this.traceId,\n      parentObservationId: this.observationId,\n    });\n  }\n\n  span(body: Omit<CreateLangfuseSpanBody, \"traceId\" | \"parentObservationId\">): LangfuseSpanClient {\n    return this.client.span({\n      ...body,\n      traceId: this.traceId,\n      parentObservationId: this.observationId,\n    });\n  }\n\n  generation(\n    body: Omit<CreateLangfuseGenerationBody, \"traceId\" | \"parentObservationId\" | \"promptName\" | \"promptVersion\"> &\n      PromptInput\n  ): LangfuseGenerationClient {\n    return this.client.generation({\n      ...body,\n      traceId: this.traceId,\n      parentObservationId: this.observationId,\n    });\n  }\n\n  score(body: Omit<CreateLangfuseScoreBody, \"traceId\" | \"parentObservationId\">): this {\n    this.client.score({\n      ...body,\n      traceId: this.traceId,\n      observationId: this.observationId,\n    });\n    return this;\n  }\n\n  getTraceUrl(): string {\n    return `${this.client.baseUrl}/trace/${this.traceId}`;\n  }\n}\n\nexport class LangfuseTraceClient extends LangfuseObjectClient {\n  constructor(client: LangfuseCore, traceId: string) {\n    super({ client, id: traceId, traceId, observationId: null });\n  }\n\n  update(body: Omit<CreateLangfuseTraceBody, \"id\">): this {\n    this.client.trace({\n      ...body,\n      id: this.id,\n    });\n    return this;\n  }\n}\n\nabstract class LangfuseObservationClient extends LangfuseObjectClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super({ client, id, traceId, observationId: id });\n  }\n}\n\nexport class LangfuseSpanClient extends LangfuseObservationClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super(client, id, traceId);\n  }\n\n  update(body: Omit<UpdateLangfuseSpanBody, \"id\" | \"traceId\">): this {\n    this.client._updateSpan({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n    });\n    return this;\n  }\n\n  end(body?: Omit<UpdateLangfuseSpanBody, \"id\" | \"endTime\" | \"traceId\">): this {\n    this.client._updateSpan({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n      endTime: new Date(),\n    });\n    return this;\n  }\n}\n\nexport class LangfuseGenerationClient extends LangfuseObservationClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super(client, id, traceId);\n  }\n\n  update(\n    body: Omit<UpdateLangfuseGenerationBody, \"id\" | \"traceId\" | \"promptName\" | \"promptVersion\"> & PromptInput\n  ): this {\n    this.client._updateGeneration({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n    });\n    return this;\n  }\n\n  end(\n    body?: Omit<UpdateLangfuseGenerationBody, \"id\" | \"traceId\" | \"endTime\" | \"promptName\" | \"promptVersion\"> &\n      PromptInput\n  ): this {\n    this.client._updateGeneration({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n      endTime: new Date(),\n    });\n    return this;\n  }\n}\n\nexport class LangfuseEventClient extends LangfuseObservationClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super(client, id, traceId);\n  }\n}\n\nexport class LangfusePromptClient {\n  private promptResponse: CreateLangfusePromptResponse;\n  public readonly name: string;\n  public readonly version: number;\n  public readonly prompt: string;\n  public readonly config: unknown;\n\n  constructor(prompt: CreateLangfusePromptResponse) {\n    this.promptResponse = prompt;\n    this.name = prompt.name;\n    this.version = prompt.version;\n    this.prompt = prompt.prompt;\n    this.config = prompt.config;\n  }\n\n  compile(variables?: { [key: string]: string }): string {\n    return mustache.render(this.promptResponse.prompt, variables ?? {});\n  }\n}\n\nclass LangfusePromptCacheItem {\n  private _expiry: number;\n\n  constructor(\n    public value: LangfusePromptClient,\n    ttlSeconds: number\n  ) {\n    this._expiry = Date.now() + ttlSeconds * 1000;\n  }\n\n  get isExpired(): boolean {\n    return Date.now() > this._expiry;\n  }\n}\n\nclass LangfusePromptCache {\n  private _cache: Map<string, LangfusePromptCacheItem>;\n  private _defaultTtlSeconds: number;\n\n  constructor() {\n    this._cache = new Map<string, LangfusePromptCacheItem>();\n    this._defaultTtlSeconds = DEFAULT_PROMPT_CACHE_TTL_SECONDS;\n  }\n\n  public getIncludingExpired(key: string): LangfusePromptCacheItem | null {\n    return this._cache.get(key) ?? null;\n  }\n\n  public set(key: string, value: LangfusePromptClient, ttlSeconds?: number): void {\n    const effectiveTtlSeconds = ttlSeconds ?? this._defaultTtlSeconds;\n    this._cache.set(key, new LangfusePromptCacheItem(value, effectiveTtlSeconds));\n  }\n}\n\nexport * from \"./types\";\nexport * from \"./openapi/server\";\n"],"names":["LangfusePersistedProperty","assert","truthyValue","message","Error","removeTrailingSlash","url","replace","retriable","fn","props","log","retryCount","retryDelay","retryCheck","lastError","i","Promise","resolve","setTimeout","res","e","JSON","stringify","generateUUID","globalThis","d","Date","getTime","d2","performance","now","c","r","Math","random","floor","toString","currentTimestamp","currentISOTime","toISOString","safeSetTimeout","timeout","t","unref","getEnv","key","process","env","configLangfuseSDK","params","secretRequired","publicKey","secretKey","coreOptions","finalPublicKey","finalSecretKey","undefined","finalBaseUrl","baseUrl","finalCoreOptions","console","error","SimpleEventEmitter","constructor","events","on","event","listener","push","filter","x","emit","payload","common_release_envs","getCommonReleaseEnvs","value","LangfuseMemoryStorage","_memoryStorage","getProperty","setProperty","DEFAULT_PROMPT_CACHE_TTL_SECONDS","LangfuseFetchHttpError","response","body","status","name","LangfuseFetchNetworkError","cause","isLangfuseFetchError","err","LangfuseCoreStateless","debugMode","pendingPromises","_events","options","flushAt","max","flushInterval","release","_retryOptions","fetchRetryCount","fetchRetryDelay","requestTimeout","sdkIntegration","getCommonEventProperties","$lib","getLibraryId","$lib_version","getLibraryVersion","cb","debug","enabled","removeDebugCallback","traceStateless","id","bodyId","bodyRelease","rest","parsedBody","enqueue","eventStateless","startTime","bodyStartTime","spanStateless","generationStateless","prompt","promptName","promptVersion","version","scoreStateless","updateSpanStateless","updateGenerationStateless","_getDataset","fetch","_getFetchOptions","method","then","json","getDatasetRun","datasetName","runName","createDatasetRunItem","createDataset","createDatasetItem","getDatasetItem","_parsePayload","parse","createPromptStateless","getPromptStateless","data","fetchResult","type","queue","getPersistedProperty","Queue","timestamp","metadata","setPersistedProperty","length","flush","_flushTimer","flushAsync","_reject","callback","clearTimeout","items","splice","MAX_MSG_SIZE","BATCH_SIZE_LIMIT","processQueueItems","promiseUUID","done","batch","batch_size","sdk_integration","sdk_version","sdk_variant","public_key","sdk_name","fetchOptions","requestPromise","fetchWithRetry","catch","finally","totalSize","processedItems","remainingItems","itemSize","Blob","size","warn","slice","p","headers","constructAuthorizationHeader","Authorization","encodedCredentials","btoa","Buffer","from","retryOptions","AbortSignal","ms","ctrl","AbortController","abort","signal","returnBody","errors","string","shutdownAsync","all","Object","values","map","shutdown","awaitAllQueuedAndPendingRequests","LangfuseWebStateless","score","LangfuseCore","_promptCache","LangfusePromptCache","trace","LangfuseTraceClient","deferRuntime","langfuseTraces","getTraceUrl","span","traceId","LangfuseSpanClient","generation","LangfuseGenerationClient","LangfuseEventClient","getDataset","dataset","returnDataset","item","link","obj","datasetItemId","observationId","createPrompt","LangfusePromptClient","getPrompt","cacheKey","_getPromptCacheKey","cachedPrompt","getIncludingExpired","_fetchPromptAndUpdateCache","cacheTtlSeconds","isExpired","set","_updateSpan","_updateGeneration","LangfuseObjectClient","client","parentObservationId","update","LangfuseObservationClient","end","endTime","promptResponse","config","compile","variables","mustache","render","LangfusePromptCacheItem","ttlSeconds","_expiry","_cache","Map","_defaultTtlSeconds","get","effectiveTtlSeconds"],"mappings":"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"}